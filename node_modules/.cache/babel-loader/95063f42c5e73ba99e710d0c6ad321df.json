{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js\";\nimport './WebcamStream.css';\nimport React from 'react';\nimport { Button, Alert, Progress } from 'reactstrap'; //import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport { handleDataAvailable, setProgressBarColor, ctrlBtnFunction, countdown, urlToPromise, downloadScreenshots, downloadVideo, captureScreenshot, mirror, fullScreen } from './functions.js'; // Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {// isVideoLoading: true,\n      // fullScreen: false\n    };\n    this.videoTag = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.countdownFrom = 1;\n    this.timeStartPressed = null;\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.videoRecorded = null;\n    this.mirrorScale = [1, 1];\n    this.mirrorTranslate = [0, 0];\n    this.canvasHeight = 0;\n    this.canvasWidth = 0;\n  }\n\n  setStream() {\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\"); // Falta cerrar el stream anterior antes de abrir uno nuevo.\n\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.value ? {\n          exact: selectVideoSrc.value\n        } : undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.props.changeStateProp({\n          isVideoLoading: false\n        });\n        var canvasPreviewElement = this.props.canvasPreview.current;\n\n        if (canvasPreviewElement) {\n          var canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.translate(this.mirrorTranslate[0], this.mirrorTranslate[1]);\n          canvasPreview.scale(this.mirrorScale[0], this.mirrorScale[1]);\n          canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n          if (this.props.currentState.stateName.localeCompare(\"Countdown\") === 0) {\n            countdown(canvasPreviewElement, this);\n          }\n\n          requestAnimationFrame(this.tick);\n        }\n      }\n    }, 50);\n  }\n\n  startRecording() {\n    var options = {\n      mimeType: \"video/webm;codecs=vp8\"\n    };\n    this.mediaRecorder = new MediaRecorder(this.props.canvasPreview.current.captureStream(), options);\n    this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n    this.mediaRecorder.start();\n    this.props.getVideoThumbnail(this.props.canvasPreview.current.toDataURL(\"image/jpeg\", 1));\n  }\n\n  stopRecording() {\n    this.mediaRecorder.stop();\n  }\n\n  downloadVideo() {\n    downloadVideo(this);\n  }\n\n  captureScreenshot() {\n    captureScreenshot(this);\n  }\n\n  downloadScreenshots() {\n    downloadScreenshots(this);\n  }\n\n  mirror(way) {\n    mirror(this, way);\n  }\n\n  componentDidMount() {\n    //initial message on canvas\n    let cnvs = document.getElementById(\"canvasMessage\");\n    cnvs.style.height = 50 * 3 / 4 + \"vw\";\n    cnvs.style.backgroundColor = \"black\";\n    var ctx = cnvs.getContext(\"2d\");\n    ctx.font = cnvs.height / 15 + \"px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(\"Seleccione un dispositivo de imagen\", cnvs.width / 10, 3 * cnvs.height / 8);\n    ctx.fillText(\"en el panel de  configuración.\", cnvs.width / 10, 4 * cnvs.height / 8); //disp\n    //let btns= document.getElementById(\"buttons\");\n  }\n\n  render() {\n    const isVideoLoading = this.props.currentState.isVideoLoading;\n    const colorScreenshotBtn = this.props.currentState.enableCaptureBtn ? \"white\" : \"grey\";\n    const dispProgress = this.props.currentState.showProgressBar ? \"block\" : \"none\";\n\n    if (this.props.currentState.showProgressBar) {\n      if (this.props.currentState.hideSidePanel) {\n        this.props.placeProgressBar(\"btnsOnCanvas\");\n        console.log(\"llll\");\n      } else if (this.props.currentState.fullScreen) {\n        this.props.placeProgressBar(\"btnsFS\");\n      } else {\n        this.props.placeProgressBar(\"btnsBelowCanvas\");\n      }\n    }\n\n    if (!isVideoLoading && !this.props.currentState.hideSidePanel && !this.props.currentState.fullScreen) {\n      let btns = document.getElementById(\"buttons\");\n\n      if (btns) {\n        btns.style.top = 50 * 3 / 4 + \"vw\";\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"WebcamStream_Wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      autoPlay: true,\n      id: \"video\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvasDiv\",\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, this.props.currentState.canvasAlert && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 19\n      }\n    }, \"Verifique el enfoque del dispositivo.\")), this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    }, \"Estableciendo conexi\\xF3n con el servidor.\")), this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.props.canvasPreview,\n      id: \"canvasPreview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 19\n      }\n    }), this.props.currentState.stateName.localeCompare(\"Countdown\") === 0 && /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvasCountdown\",\n      width: \"1000\",\n      height: \"750\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }))), isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvasMessage\",\n      className: \"canvasRendered\",\n      width: \"1000\",\n      height: \"750\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    })), !this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      id: \"recordedVideoElement\",\n      controls: true,\n      srcObject: null,\n      src: null,\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      id: \"ctrlStartOver\",\n      color: \"primary\",\n      size: \"lg\",\n      onClick: () => {\n        ctrlBtnFunction(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, this.props.currentState.textCtrlBtn)), this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 5\n      }\n    }, !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ctrlBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      size: \"lg\",\n      onClick: () => {\n        ctrlBtnFunction(this);\n      },\n      outline: true,\n      disabled: !this.props.currentState.enableCtrlBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, this.props.currentState.textCtrlBtn)), !isVideoLoading && /*#__PURE__*/React.createElement(\"span\", {\n      id: \"screenshotBtn\",\n      className: true,\n      onClick: () => {\n        if (this.props.currentState.enableCaptureBtn) {\n          this.captureScreenshot();\n        }\n      },\n      style: {\n        color: colorScreenshotBtn\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-camera\",\n      style: {\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 19\n      }\n    })), !isVideoLoading && /*#__PURE__*/React.createElement(\"span\", {\n      id: \"fullScreenBtn\",\n      onClick: () => fullScreen(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, !this.props.currentState.fullScreen && /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-expand\",\n      style: {\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 58\n      }\n    }), this.props.currentState.fullScreen && /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-compress\",\n      style: {\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 58\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"progressBar\",\n      style: {\n        display: dispProgress\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Progress, {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      value: this.props.currentState.progress,\n      color: setProgressBarColor(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js"],"names":["React","Button","Alert","Progress","handleDataAvailable","setProgressBarColor","ctrlBtnFunction","countdown","urlToPromise","downloadScreenshots","downloadVideo","captureScreenshot","mirror","fullScreen","WebcamStream","Component","constructor","props","state","videoTag","createRef","tick","bind","countdownFrom","timeStartPressed","mediaRecorder","recordedChunks","videoRecorded","mirrorScale","mirrorTranslate","canvasHeight","canvasWidth","setStream","selectVideoSrc","document","getElementById","navigator","mediaDevices","getUserMedia","video","deviceId","value","exact","undefined","facingMode","then","stream","current","srcObject","requestAnimationFrame","window","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","changeStateProp","isVideoLoading","canvasPreviewElement","canvasPreview","getContext","height","videoHeight","width","videoWidth","translate","scale","drawImage","currentState","stateName","localeCompare","startRecording","options","mimeType","MediaRecorder","captureStream","ondataavailable","start","getVideoThumbnail","toDataURL","stopRecording","stop","way","componentDidMount","cnvs","style","backgroundColor","ctx","font","fillStyle","fillText","render","colorScreenshotBtn","enableCaptureBtn","dispProgress","showProgressBar","hideSidePanel","placeProgressBar","console","log","btns","top","display","canvasAlert","position","zIndex","renderCanvas","textCtrlBtn","enableCtrlBtn","color","margin","progress"],"mappings":"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","sourcesContent":["import './WebcamStream.css'\nimport React from 'react';\nimport {Button, Alert, Progress  } from 'reactstrap';\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport \"@fortawesome/fontawesome-free/css/all.css\"\n\n\nimport {handleDataAvailable, setProgressBarColor, ctrlBtnFunction, countdown, \n        urlToPromise, downloadScreenshots, downloadVideo, captureScreenshot, mirror,\n        fullScreen} from './functions.js';\n\n// Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n     // isVideoLoading: true,\n     // fullScreen: false\n    };\n\n    this.videoTag = React.createRef();\n    this.tick = this.tick.bind(this);\n\n    this.countdownFrom = 1;\n    this.timeStartPressed = null;\n\n    this.mediaRecorder = null;\n    this.recordedChunks= [];\n\t  this.videoRecorded = null;\n\n    this.mirrorScale = [1,1];\n    this.mirrorTranslate = [0,0];\n\n    this.canvasHeight = 0;\n    this.canvasWidth = 0;\n    \n  }\n\n  setStream(){\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\");\n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.value? {exact: selectVideoSrc.value}:undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.props.changeStateProp({ isVideoLoading: false });\n          var canvasPreviewElement = this.props.canvasPreview.current;\n          if(canvasPreviewElement){\n          var canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.translate(this.mirrorTranslate[0],this.mirrorTranslate[1]);\n          canvasPreview.scale(this.mirrorScale[0],this.mirrorScale[1]);\n          canvasPreview.drawImage(\n              video,\n              0,\n              0,\n              canvasPreviewElement.width,\n              canvasPreviewElement.height\n           );\n           if(this.props.currentState.stateName.localeCompare(\"Countdown\")===0){\n             countdown(canvasPreviewElement,this);\n           }\n           requestAnimationFrame(this.tick);\n           }\n      }\n    }, 50);\n  }\n\n  startRecording(){\n      var options = { mimeType: \"video/webm;codecs=vp8\" };\n      this.mediaRecorder = new MediaRecorder(this.props.canvasPreview.current.captureStream(), options);\n      this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n      this.mediaRecorder.start();\n      this.props.getVideoThumbnail(this.props.canvasPreview.current.toDataURL(\"image/jpeg\",1));\n  }\n\n\tstopRecording(){\n    this.mediaRecorder.stop();\n\t}\n\n\tdownloadVideo(){\n\t\tdownloadVideo(this);\t\n\t}\n  \n  captureScreenshot(){\n    captureScreenshot(this);\n    }\n\n  downloadScreenshots(){\n    downloadScreenshots(this);\n  }\n  \n  mirror(way){\n    mirror(this,way);\n  }\n  componentDidMount(){\n\t\t//initial message on canvas\n    let cnvs = document.getElementById(\"canvasMessage\");\n    cnvs.style.height = 50*3/4+\"vw\";\n\t\tcnvs.style.backgroundColor= \"black\";\n\t\tvar ctx = cnvs.getContext(\"2d\");\n\t\tctx.font = cnvs.height/15 + \"px Arial\";\n\t\tctx.fillStyle = \"white\";\n\t\tctx.fillText(\"Seleccione un dispositivo de imagen\" , cnvs.width/10, 3*cnvs.height/8);\n\t\tctx.fillText(\"en el panel de  configuración.\", cnvs.width/10, 4*cnvs.height/8);\n\n    //disp\n    //let btns= document.getElementById(\"buttons\");\n\n\n  }\n\n  render() {\n    const isVideoLoading = this.props.currentState.isVideoLoading;\n    const colorScreenshotBtn = (this.props.currentState.enableCaptureBtn)? \"white\" : \"grey\";\n    const dispProgress = (this.props.currentState.showProgressBar)? \"block\":\"none\";\n\n    if(this.props.currentState.showProgressBar){\n      if(this.props.currentState.hideSidePanel){\n        this.props.placeProgressBar(\"btnsOnCanvas\");\n        console.log(\"llll\");}\n      else if(this.props.currentState.fullScreen){\n        this.props.placeProgressBar(\"btnsFS\");}\n      else{\n        this.props.placeProgressBar(\"btnsBelowCanvas\");}\n    }\n    if(!isVideoLoading && !this.props.currentState.hideSidePanel && !this.props.currentState.fullScreen){\n      let btns= document.getElementById(\"buttons\");\n      if(btns){\n      btns.style.top = 50*3/4+\"vw\";}\n\n    }\n    return (\n      <div id=\"WebcamStream_Wrapper\">\n        {/* Dummy video tag to recieve UserMedia stream.*/}\n        <video\n          ref={this.videoTag}\n          autoPlay\n          id = \"video\"\n          style={{ display: \"none\"}}\n        />\n\n        {!isVideoLoading &&\n          <div>\n            <div id=\"canvasDiv\" className=\"canvasRendered\">\n              {this.props.currentState.canvasAlert &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"warning\">Verifique el enfoque del dispositivo.</Alert>\n                </div>\n              }\n\n              {this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"info\">Estableciendo conexión con el servidor.</Alert>\n                </div>\n              }\n              \n              {this.props.currentState.renderCanvas &&\n                  <canvas ref={this.props.canvasPreview}\n                          id=\"canvasPreview\"/>\n\n              }\n              {(this.props.currentState.stateName.localeCompare(\"Countdown\") === 0) &&\n                <canvas id=\"canvasCountdown\" width=\"1000\" height=\"750\"/>\n              }\n            </div>\n          </div>\n            }\n        \n        {isVideoLoading &&\n          <div>\n            <canvas id=\"canvasMessage\"\n                    className=\"canvasRendered\" width=\"1000\" height=\"750\"/>\n          </div>\n        }\n        {!this.props.currentState.renderCanvas &&\n          <div>\n            <video id = \"recordedVideoElement\"\n                   controls\n                   srcObject = {null}\n                   src={null}\n                   className=\"canvasRendered\"/>\n            <Button id= \"ctrlStartOver\" \n                    color=\"primary\"\n                    size=\"lg\"\n                    onClick={()=>{ctrlBtnFunction(this);}}\n                    >\n                    {this.props.currentState.textCtrlBtn}\n                    </Button>\n          </div>\n        }\n        {this.props.currentState.renderCanvas &&\n\t\t\t\t<div id=\"buttons\">\n          {!isVideoLoading &&\n            <div id=\"ctrlBtn\">\n            <Button \n                    color=\"primary\"\n                    size=\"lg\"\n                    onClick={()=>{ctrlBtnFunction(this);}}\n                    outline\n                    disabled={!this.props.currentState.enableCtrlBtn}>\n                    {this.props.currentState.textCtrlBtn}</Button>\n            </div>}\n\n          {!isVideoLoading &&\n            <span  id = \"screenshotBtn\"\n                   className\n                  onClick={() => {if(this.props.currentState.enableCaptureBtn){this.captureScreenshot()}}}\n                  style={{color: colorScreenshotBtn}}>\n                  <i class=\"fas fa-camera\" style={{margin: \"0px\"}}></i>\n            </span>}\n          {!isVideoLoading &&\n            <span  id = \"fullScreenBtn\" \n                  onClick={()=>fullScreen(this)}>\n                  {!this.props.currentState.fullScreen &&<i class=\"fas fa-expand\" style={{margin: \"0px\"}}></i>}\n                  {this.props.currentState.fullScreen && <i class=\"fas fa-compress\" style={{margin: \"0px\"}}></i>}\n            </span>}\n        </div>}\n        <div id=\"progressBar\" style={{display: dispProgress}}>\n          <Progress style={{width: \"100%\", height: \"100%\"}}\n                    value={this.props.currentState.progress} \n                    color={setProgressBarColor(this)}/>\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}