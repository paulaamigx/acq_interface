{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js\";\nimport './InferenceUI.css';\nimport React from 'react';\nimport { Button, Alert } from 'reactstrap';\nimport './video-react.css'; // import css\n\nimport { Player } from 'video-react';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.videoSavedTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.mirrorCount = 0;\n    this.fullScreenCount = 0;\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.videoRecorded = null;\n  }\n\n  listDevices() {\n    navigator.mediaDevices.enumerateDevices().then(deviceInfos => {\n      this.selectVideoSrc.current.innerHTML = '';\n      let count = 1;\n      deviceInfos.forEach(deviceInfo => {\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || `Camera ${count++}`;\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      });\n    });\n  }\n\n  setStream() {\n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    // Recomiendo desacoplar un poco este código, y dejar un objeto para el stream en el constructor.\n    // \n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: this.selectVideoSrc.current.value ? {\n          exact: this.selectVideoSrc.current.value\n        } : undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n      var options = {\n        mimeType: \"video/webm;codecs=vp8\"\n      };\n      this.mediaRecorder = new MediaRecorder(stream, options); // JT: ¿Segura?\n    });\n  }\n\n  componentDidMount() {\n    this.listDevices();\n    this.setStream();\n  }\n\n  tick() {\n    const video = this.props.currentState.current.localeCompare(\"StopStream\") === 0 ? this.videoSavedTag.current : this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvasPreview.current;\n\n        if (canvasPreviewElement) {\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n          if (this.props.currentState.almostStreaming) {\n            canvasPreview.font = \"200px Arial\";\n            countdown(canvasPreview, this);\n          }\n\n          requestAnimationFrame(this.tick);\n        }\n      }\n    }, 50);\n  } //For making video recording\n\n\n  handleDataAvailable(event) {\n    console.log('handleDataAvailable', event);\n\n    if (event.data && event.data.size > 0) {\n      this.recordedChunks.push(event.data);\n    } else {\n      console.log(\"no data available for recording\");\n    }\n  }\n\n  startRecording() {\n    this.mediaRecorder.ondataavailable = this.handleDataAvailable;\n    this.mediaRecorder.start();\n    this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\", 1));\n  }\n\n  stopRecording() {\n    this.mediaRecorder.stop();\n    this.mediaRecorder.ondataavailable = null;\n    var blob = new Blob(this.recordedChunks, {\n      type: \"video/webm\"\n    });\n    this.videoRecorded = URL.createObjectURL(blob);\n    this.recordedChunks = [];\n  }\n\n  downloadVideo() {\n    var aux = document.createElement(\"a\");\n    document.body.appendChild(aux);\n    aux.style = \"display: none\";\n    aux.href = this.videoRecorded;\n    aux.download = \"test.webm\";\n    document.body.appendChild(aux);\n    aux.click();\n  }\n\n  render() {\n    const {\n      isVideoLoading\n    } = this.state;\n    let classNameToRender = this.props.currentState.fullScreen ? \"FullScreen\" : \"RegularScreen\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"absolute\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      autoPlay: true,\n      id: \"video\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mainDiv\",\n      className: \"container  mainDiv\" + classNameToRender,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvasDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, this.props.currentState.showAlert && /*#__PURE__*/React.createElement(AlertOnPreview, {\n      msg: \"Recibiendo Im\\xE1genes Borrosas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }), this.props.currentState.showStream && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      id: \"canvasPreview\",\n      className: \"canvasPreview\" + classNameToRender,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mirror\",\n      className: \"overlay\" + classNameToRender + \" mirror\" + classNameToRender + \" overlay\",\n      onClick: () => {\n        mirror(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 19\n      }\n    }, \"M\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"fullScreen\",\n      className: \"overlay\" + classNameToRender + \" fullScreen\" + classNameToRender + \" overlay\",\n      onClick: () => {\n        fullScreen(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 19\n      }\n    }, \"PC\")), !this.props.currentState.showStream && /*#__PURE__*/React.createElement(\"video\", {\n      controls: true,\n      src: this.videoRecorded,\n      width: \"640px\",\n      height: \"480px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"videoSelectDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => {\n        this.listDevices();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, \"Refrescar\"), /*#__PURE__*/React.createElement(\"select\", {\n      ref: this.selectVideoSrc,\n      style: {\n        width: 300\n      },\n      id: \"videoSelect\",\n      onChange: () => {\n        this.setStream();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => {\n        document.getElementById(\"videoSelectDiv\").remove();\n        this.props.handler(\"OnConnection\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 6\n      }\n    }, \"Ok\")), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 28\n      }\n    }, \"Please wait while we load the video stream.\"));\n  }\n\n}\n\nasync function fullScreen(el) {\n  let div = document.getElementById(\"mainDiv\");\n  let canvas = document.getElementById(\"canvasPreview\");\n  let screenshots = document.getElementById(\"screenshots\");\n  let btns = await document.getElementById(\"buttons\"); //go fullscreen\n\n  if (el.fullScreenCount % 2 === 0) {\n    el.props.changeStateProp({\n      fullScreen: true\n    });\n    btns.appendChild(document.getElementById(\"mirror\"));\n    btns.appendChild(document.getElementById(\"fullScreen\"));\n    div.appendChild(btns); //style\n\n    canvas.style.height = window.screen.height + \"px\";\n    canvas.style.width = window.screen.height * 640 / 480 + \"px\";\n    canvas.style.left = (window.screen.width - getComputedStyle(canvas).width) / 2 + \"px\";\n    screenshots.style.width = getComputedStyle(canvas).width;\n    btns.style.width = getComputedStyle(canvas).width;\n\n    if (div.webkitRequestFullScreen) {\n      div.webkitRequestFullScreen();\n    } else {\n      div.requestFullscreen();\n    }\n\n    el.divId = \"ButtonsFullScreen\";\n  } //exit fullscreen\n  else {\n      el.props.changeStateProp({\n        fullScreen: false\n      }); //detach elements\n\n      div.appendChild(document.getElementById(\"mirror\"));\n      div.appendChild(document.getElementById(\"fullScreen\"));\n      document.getElementById(\"ElementsMain\").appendChild(btns);\n      document.getElementById(\"ElementsMain\").appendChild(screenshots); //style\n\n      canvas.style.height = \"480px\";\n      canvas.style.width = \"640px\";\n      screenshots.style.width = \"640px\";\n      document.exitFullscreen();\n    }\n\n  el.fullScreenCount++;\n}\n\nfunction AlertOnPreview(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"alert\",\n    style: {\n      position: 'absolute',\n      zIndex: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    color: \"warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }\n  }, props.msg));\n}\n\nfunction mirror(el) {\n  let canvas = document.querySelector(\"#canvasPreview\");\n\n  if (el.mirrorCount % 2 === 0) {\n    canvas.style.transform = \"translate(640,0)\";\n    canvas.style.transform = \"scale(-1,1)\";\n  } else {\n    canvas.style.transform = \"none\";\n  }\n\n  el.mirrorCount++;\n}\n\nfunction countdown(canvas, el) {\n  let context = canvas;\n  let countdown = el.props.countdownFrom - Math.trunc((-el.props.currentState.timeStartPressed + Date.now()) / 1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n  ;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n\n  if (countdown >= 10) {\n    context.fillText(countdown.toString(10), 200, 315);\n  } else if (countdown >= 1) {\n    context.fillText(countdown.toString(10), 270, 308, 100);\n  }\n\n  context.fill();\n\n  if (countdown < 1) {\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n    el.props.handler(\"Streaming\");\n  }\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js"],"names":["React","Button","Alert","Player","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","videoSavedTag","canvasPreview","selectVideoSrc","tick","bind","mirrorCount","fullScreenCount","mediaRecorder","recordedChunks","videoRecorded","listDevices","navigator","mediaDevices","enumerateDevices","then","deviceInfos","current","innerHTML","count","forEach","deviceInfo","option","document","createElement","value","deviceId","kind","text","label","appendChild","setStream","getUserMedia","video","exact","undefined","facingMode","stream","srcObject","requestAnimationFrame","window","options","mimeType","MediaRecorder","componentDidMount","currentState","localeCompare","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","height","videoHeight","width","videoWidth","drawImage","almostStreaming","font","countdown","handleDataAvailable","event","console","log","data","size","push","startRecording","ondataavailable","start","getVideoThumbnail","toDataURL","stopRecording","stop","blob","Blob","type","URL","createObjectURL","downloadVideo","aux","body","style","href","download","click","render","classNameToRender","fullScreen","position","display","showAlert","showStream","mirror","getElementById","remove","handler","el","div","canvas","screenshots","btns","changeStateProp","screen","left","getComputedStyle","webkitRequestFullScreen","requestFullscreen","divId","exitFullscreen","AlertOnPreview","zIndex","msg","querySelector","transform","context","countdownFrom","Math","trunc","timeStartPressed","Date","now","beginPath","arc","PI","fillStyle","fill","fillText","toString","streaming"],"mappings":"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","sourcesContent":["import './InferenceUI.css'\nimport React from 'react';\nimport {Button, Alert} from 'reactstrap';\n\nimport './video-react.css'; // import css\nimport { Player } from 'video-react';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true,\n    };\n\n    this.videoTag = React.createRef();\n    this.videoSavedTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n\n    this.mirrorCount = 0;\n    this.fullScreenCount = 0;\n\n    this.mediaRecorder = null;\n    this.recordedChunks= [];\n\t  this.videoRecorded = null;\n  }\n\n  listDevices(){\n    navigator.mediaDevices.enumerateDevices()\n    .then((deviceInfos) => {\n      this.selectVideoSrc.current.innerHTML = '';\n      let count = 1;\n      deviceInfos.forEach( deviceInfo => {\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || `Camera ${count++}`;\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      });\n    });\n  }\n\n  setStream(){\n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    // Recomiendo desacoplar un poco este código, y dejar un objeto para el stream en el constructor.\n    // \n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: this.selectVideoSrc.current.value? {exact: this.selectVideoSrc.current.value}:undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n      var options = { mimeType: \"video/webm;codecs=vp8\" };\n      this.mediaRecorder = new MediaRecorder(stream, options); // JT: ¿Segura?\n    });\n  }\n\n  componentDidMount() {\n    this.listDevices();\n    this.setStream();\n  }\n\n  tick() {\n    const video = (this.props.currentState.current.localeCompare(\"StopStream\") === 0)?this.videoSavedTag.current : this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n          const canvasPreviewElement = this.canvasPreview.current;\n          if(canvasPreviewElement){\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n              video,\n              0,\n              0,\n              canvasPreviewElement.width,\n              canvasPreviewElement.height\n           );\n           if(this.props.currentState.almostStreaming){\n             canvasPreview.font = \"200px Arial\"\n             countdown(canvasPreview,this);\n           }\n           requestAnimationFrame(this.tick);\n           }\n      }\n    }, 50);\n  }\n\n  //For making video recording\n  handleDataAvailable(event){\n\t\tconsole.log('handleDataAvailable',event);\n  \tif (event.data && event.data.size > 0) {\n   \t  this.recordedChunks.push(event.data);\n  \t}\n\t\telse {\n    \tconsole.log(\"no data available for recording\");\n  \t}\n  }\n\n  startRecording(){\n      this.mediaRecorder.ondataavailable = this.handleDataAvailable;\n      this.mediaRecorder.start();\n      this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\",1));\n  }\n\n\tstopRecording(){\n    this.mediaRecorder.stop();\n    this.mediaRecorder.ondataavailable = null;\n    var blob = new Blob(this.recordedChunks, {\n\t\t\ttype: \"video/webm\"\n\t\t});\n    this.videoRecorded = URL.createObjectURL(blob);\n    this.recordedChunks = [];\n\t}\n\n\tdownloadVideo(){\n\t\tvar aux = document.createElement(\"a\");\n\t\tdocument.body.appendChild(aux);\n\t\taux.style = \"display: none\";\n\t\taux.href = this.videoRecorded;\n    aux.download = \"test.webm\";\n    document.body.appendChild(aux);\n\t\taux.click();\t\t\n\t}\n\n  render() {\n    const { isVideoLoading } = this.state;\n    let classNameToRender = (this.props.currentState.fullScreen)? \"FullScreen\":\"RegularScreen\";\n    return (\n      <div style={{position: \"absolute\"}}>\n        <video\n          ref={this.videoTag}\n          autoPlay\n          id = \"video\"\n          style={{ display: \"none\"}}/>\n\n        {!isVideoLoading && \n          <div  id=\"mainDiv\" \n                className={\"container  mainDiv\" + classNameToRender }>\n            <div id=\"canvasDiv\">\n              {this.props.currentState.showAlert && \n                <AlertOnPreview msg=\"Recibiendo Imágenes Borrosas\"/>}\n              \n              {this.props.currentState.showStream &&\n                <div>\n                  <canvas ref={this.canvasPreview} \n                          id=\"canvasPreview\" \n                          className = {\"canvasPreview\" + classNameToRender}/>\n                  <div id=\"mirror\"\n                       className={\"overlay\"  + classNameToRender +\" mirror\"+ classNameToRender + \" overlay\"}\n                       onClick={()=>{mirror(this)}}>M</div>\n                  <div id=\"fullScreen\" \n                       className={\"overlay\"  + classNameToRender +\" fullScreen\"+ classNameToRender + \" overlay\"}\n                       onClick={()=>{fullScreen(this)}}>PC</div>                       \n                </div>\n              }\n              {!this.props.currentState.showStream &&\n                <video\n                  controls\n                  src={this.videoRecorded}\n                  width=\"640px\"\n                  height=\"480px\"\n                 />\n              }\n            </div>\n          </div>\n        }\n\t\t\t\t<div id=\"videoSelectDiv\">\n          <Button color ='primary'\n                  onClick={()=>{this.listDevices();}}\n          >Refrescar</Button>\n\t\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\t\tstyle={{width: 300}}\n\t\t\t\t\t\t\t\t\tid=\"videoSelect\"\n                  onChange={()=>{this.setStream();}}/>\n\t\t\t\t\t<Button color='primary'\n                  onClick={()=>{document.getElementById(\"videoSelectDiv\").remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.handler(\"OnConnection\");}}\n          >Ok</Button>\n\t\t\t\t</div>\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n      </div>\n    );\n  }\n}\n\nasync function fullScreen(el){\n  let div = document.getElementById(\"mainDiv\");\n  let canvas  = document.getElementById(\"canvasPreview\");\n  let screenshots = document.getElementById(\"screenshots\"); \n  let btns = await document.getElementById(\"buttons\");\n  \n  //go fullscreen\n  if (el.fullScreenCount%2 === 0){\n    el.props.changeStateProp({fullScreen: true});\n    btns.appendChild(document.getElementById(\"mirror\"));\n    btns.appendChild(document.getElementById(\"fullScreen\"));\n    div.appendChild(btns);\n    \n    //style\n    canvas.style.height = window.screen.height + \"px\";\n    canvas.style.width = window.screen.height*640/480 + \"px\";\n    canvas.style.left = (window.screen.width - getComputedStyle(canvas).width)/2 + \"px\";\n\n    screenshots.style.width =  getComputedStyle(canvas).width;\n    btns.style.width = getComputedStyle(canvas).width;\n\n    if(div.webkitRequestFullScreen) {\n      div.webkitRequestFullScreen(); }\n    else {\n      div.requestFullscreen();} \n    el.divId = \"ButtonsFullScreen\";\n  }\n\n  //exit fullscreen\n  else{\n    el.props.changeStateProp({fullScreen: false});\n    //detach elements\n    div.appendChild(document.getElementById(\"mirror\"));\n    div.appendChild(document.getElementById(\"fullScreen\"));\n    document.getElementById(\"ElementsMain\").appendChild(btns);\n    document.getElementById(\"ElementsMain\").appendChild(screenshots);\n  \n    //style\n    canvas.style.height =  \"480px\";\n    canvas.style.width=  \"640px\";\n    screenshots.style.width =  \"640px\";\n    document.exitFullscreen();\n  }\n  el.fullScreenCount++;\n}\n\nfunction AlertOnPreview(props){\n  return(\n    <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n      <Alert color=\"warning\">{props.msg}</Alert>\n    </div>\n  )\n}\nfunction mirror(el){\n  let canvas = document.querySelector(\"#canvasPreview\");\n  if (el.mirrorCount%2 === 0){\n    canvas.style.transform = \"translate(640,0)\";\n    canvas.style.transform = \"scale(-1,1)\";\n  }\n  else{\n    canvas.style.transform = \"none\";\n  }\n  el.mirrorCount ++;\n}\n\nfunction countdown(canvas,el){\n\tlet context = canvas;\t\n\tlet countdown = el.props.countdownFrom- Math.trunc((-el.props.currentState.timeStartPressed + Date.now())/1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n  if(countdown >= 10){\n    context.fillText(countdown.toString(10),200,315);\n  }else if(countdown >= 1){\n    context.fillText(countdown.toString(10),270,308,100);\n  }\n\n  context.fill();\n  if (countdown <  1){\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n\t\tel.props.handler(\"Streaming\");\n  }\n}\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}