{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Container } from 'reactstrap';\nimport React, { useState } from 'react'; //import './InferenceUI.css'\n\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\n\nimport { Carousel } from 'react-responsive-carousel';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport JSZipUtils from 'jszip-utils';\n\nclass Screenshots extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.captureScreenshot = async () => {\n      var canvas = document.querySelector(\"#canvasPreview\");\n      var imgAsDataURL = canvas.toDataURL(\"image/jpeg\", 1);\n      let newSlidesData = [{\n        src: imgAsDataURL,\n        id: this.state.lastScreenshotID\n      }];\n      this.setState({\n        slidesData: this.state.slidesData.concat(newSlidesData)\n      });\n      await this.setState({\n        lastScreenshotID: this.state.lastScreenshotID + 1\n      });\n      let thumbs = document.getElementsByClassName(\"thumb\");\n\n      thumbs[thumbs.length - 1].onclick = async a => {\n        if (this.props.currentState.enabledModalScreenshots) {\n          this.selected = a.target.childNodes[0].id;\n          this.setState({\n            modalOn: true\n          });\n        }\n      };\n\n      let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\n      try {\n        btnsCarousel[2].style.backgroundColor = 'black';\n        btnsCarousel[3].style.backgroundColor = 'black';\n      } catch {}\n\n      document.querySelector(\".carousel-slider\").style.display = 'none';\n    };\n\n    this.state = {\n      lastScreenshotID: 0,\n      modalOn: false,\n      slidesData: []\n    };\n    this.selected = 0;\n  }\n\n  getScreenshots() {\n    return this.state.slidesData;\n  }\n\n  download() {\n    console.log(\"ww\");\n    let zip = new JSZip(); //for(let i=0;i < this.state.slidesData; i++){\n\n    zip.file(\"ss.jpeg\", urlToPromise(this.state.slidesData[0].src), {\n      binary: true\n    });\n    zip.generateAsync({\n      type: \"blob\"\n    }).then(function (content) {\n      FileSaver.saveAs(content, \"download.zip\");\n    }); //}\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"640px\",\n        position: \"absolute\",\n        top: \"600px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 4\n      }\n    }, this.state.modalOn && /*#__PURE__*/React.createElement(ModalScreenshots, {\n      handler: () => {\n        this.setState({\n          modalOn: false\n        });\n      },\n      data: this.state.slidesData,\n      selected: this.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Carousel, {\n      showArrows: true,\n      selectedItem: this.state.lastScreenshotID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, this.state.slidesData.map(slide => /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.lastScreenshotID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"slick-slide-image\",\n      src: slide.src,\n      alt: \"\",\n      id: slide.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n}\n\nconst ModalScreenshots = props => {\n  const {\n    className,\n    data,\n    selected\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal);\n    props.handler();\n  };\n\n  let btnsCarousel = document.getElementsByClassName(\"control-arrow\"); //console.log(btnsCarousel);\n\n  try {\n    btnsCarousel[6].style.backgroundColor = 'green';\n    btnsCarousel[6].style.zIndex = 5;\n  } catch (e) {//console.log(e);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    size: 'xl',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Modal title\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Carousel, {\n    showArrows: true,\n    selectedItem: selected,\n    id: \"modalScreenshot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, data.map(slide => /*#__PURE__*/React.createElement(\"div\", {\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"slick-slide-image\",\n    src: slide.src,\n    alt: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  })));\n};\n\nfunction urlToPromise(url) {\n  return new Promise(function (resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nexport default Screenshots;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js"],"names":["Modal","ModalHeader","ModalBody","ModalFooter","Container","React","useState","Carousel","JSZip","FileSaver","JSZipUtils","Screenshots","Component","constructor","props","captureScreenshot","canvas","document","querySelector","imgAsDataURL","toDataURL","newSlidesData","src","id","state","lastScreenshotID","setState","slidesData","concat","thumbs","getElementsByClassName","length","onclick","a","currentState","enabledModalScreenshots","selected","target","childNodes","modalOn","btnsCarousel","style","backgroundColor","display","getScreenshots","download","console","log","zip","file","urlToPromise","binary","generateAsync","type","then","content","saveAs","render","width","position","top","map","slide","ModalScreenshots","className","data","modal","setModal","toggle","handler","zIndex","e","url","Promise","resolve","reject","getBinaryContent","err"],"mappings":"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","sourcesContent":["import {Modal, ModalHeader, ModalBody, ModalFooter, Container\n} from 'reactstrap';\nimport React, {useState}from 'react';\n//import './InferenceUI.css'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport JSZipUtils from 'jszip-utils'\nclass Screenshots extends React.Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nlastScreenshotID: 0,\nmodalOn: false,\nslidesData: []\n\n};\nthis.selected = 0;\n}\n\ncaptureScreenshot = async () => {\nvar canvas = document.querySelector(\"#canvasPreview\");\nvar imgAsDataURL = canvas.toDataURL(\"image/jpeg\",1);\n\nlet newSlidesData = [{src: imgAsDataURL, id: this.state.lastScreenshotID}];\nthis.setState({slidesData: this.state.slidesData.concat(newSlidesData)});\nawait this.setState({lastScreenshotID: this.state.lastScreenshotID+1});\n\nlet thumbs = document.getElementsByClassName(\"thumb\");\nthumbs[thumbs.length-1].onclick = async(a) => {\nif(this.props.currentState.enabledModalScreenshots){\nthis.selected = a.target.childNodes[0].id;\nthis.setState({modalOn: true});\n\n}\n};\t\n\nlet btnsCarousel = document.getElementsByClassName(\"control-arrow\");\ntry{\nbtnsCarousel[2].style.backgroundColor= 'black';\nbtnsCarousel[3].style.backgroundColor= 'black';\n}\ncatch{\n}\ndocument.querySelector(\".carousel-slider\").style.display = 'none';\n\n}\ngetScreenshots(){\nreturn this.state.slidesData;\n}\ndownload(){\nconsole.log(\"ww\");\nlet zip = new JSZip();\n//for(let i=0;i < this.state.slidesData; i++){\nzip.file(\"ss.jpeg\",urlToPromise(this.state.slidesData[0].src),{binary:true});\n\t\t\tzip.generateAsync({type: \"blob\"}).then(function(content) {\n  \t\t\tFileSaver.saveAs(content, \"download.zip\");\n\t\t\t});\n\t\t//}\n\t}\n\trender(){\n    return(\n\t\t\t<div style={{width: \"640px\", position: \"absolute\", top: \"600px\"}}>\n\t\t\t\t{this.state.modalOn && \n          <ModalScreenshots handler={()=>{this.setState({modalOn:false})}} \n                            data={this.state.slidesData} \n                            selected={this.selected}/>}\n        <Carousel showArrows={true} \n                  selectedItem={this.state.lastScreenshotID} >\n        {this.state.slidesData.map((slide) =>\n          <div key={this.state.lastScreenshotID}>\n            <img className=\"slick-slide-image\" src={slide.src} alt='' id={slide.id}/>\n          </div>)}\n        </Carousel>\n\t\t\t</div>\n    );\n\t}\n\n}\n\nconst ModalScreenshots = (props) => {\n  const {\n    className,\n    data,\n    selected,\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal); \n\t\tprops.handler();\n  }\n  let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n  //console.log(btnsCarousel);\n  \n  try{\n  btnsCarousel[6].style.backgroundColor = 'green';\n  btnsCarousel[6].style.zIndex= 5;\n  \n\t}\n\tcatch(e){\n    //console.log(e);\n\t}\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className} size={'xl'}>\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n        <ModalBody>\n        <Carousel showArrows={true} selectedItem={selected} id=\"modalScreenshot\" >\n          {data.map((slide) =>\n            <div key={0}>\n              <img className=\"slick-slide-image\" src={slide.src} alt='Error' />\n            </div>\n          )}\n        </Carousel>\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\nfunction urlToPromise(url) {\nreturn new Promise(function(resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n        if(err) {\n            reject(err);\n        } else {\n            resolve(data);\n        }\n    });\n});\n}\nexport default Screenshots;\n"]},"metadata":{},"sourceType":"module"}