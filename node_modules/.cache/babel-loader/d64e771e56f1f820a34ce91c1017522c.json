{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container } from 'reactstrap';\n/* Container, Col, Row,\n Form, FormGroup, Label, Input,\n Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\n\nimport React, { useRef, useEffect } from 'react'; //import io from 'socket.io-client';\n\nvar almostStreaming = false;\nvar timeStartPressed;\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.canvasPreview.current.font = \"200px Arial\";\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.enumerateDevices().then(deviceInfos => {\n      for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || 'camera ' + (this.selectVideoSrc.current.length + 1);\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      }\n    }).then(navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: \"environment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n    }));\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvasPreview.current;\n        const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n        canvasPreviewElement.height = video.videoHeight;\n        canvasPreviewElement.width = video.videoWidth;\n        canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n        if (almostStreaming) {\n          countdown(5, canvasPreview);\n        }\n\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const {\n      isVideoLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      width: \"400\",\n      height: \"400\",\n      autoPlay: true,\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      id: \"canvasPreview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    }), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 28\n      }\n    }, \"Please wait while we load the video stream.\"), /*#__PURE__*/React.createElement(\"select\", {\n      ref: this.selectVideoSrc,\n      style: {\n        width: 300\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nfunction countdown(seconds, canvas) {\n  //let context = document.querySelector(\"#canvasPreview\").getContext('2d');\n  let context = canvas;\n  let countdown = seconds - Math.trunc((-timeStartPressed + Date.now()) / 1000);\n  console.log(countdown);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n  ;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n\n  if (countdown >= 10) {\n    context.fillText(countdown.toString(10), 200, 315);\n  } else if (countdown >= 1) {\n    context.fillText(countdown.toString(10), 270, 308, 100);\n  }\n\n  context.fill();\n\n  if (countdown < 1) {\n    context.beginPath();\n    context.fillStyle = \"black\";\n    context.fillText(\"0\", 260, 315);\n    context.fill(); //button.state.almostStreaming = false;\n    //button.state.streaming = true;\n  }\n}\n\nfunction startFunction() {\n  almostStreaming = true;\n  timeStartPressed = Date.now();\n  console.log(timeStartPressed);\n}\n\nclass Buttons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Start\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => startFunction(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 4\n      }\n    }, this.state.text);\n  }\n\n}\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(WebcamStream, {\n      id: \"asa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Buttons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","React","useRef","useEffect","almostStreaming","timeStartPressed","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","selectVideoSrc","tick","bind","current","font","componentDidMount","navigator","mediaDevices","enumerateDevices","then","deviceInfos","i","length","deviceInfo","option","document","createElement","value","deviceId","kind","text","label","appendChild","getUserMedia","video","facingMode","stream","srcObject","requestAnimationFrame","window","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","height","videoHeight","width","videoWidth","drawImage","countdown","render","display","seconds","canvas","context","Math","trunc","Date","now","console","log","beginPath","arc","PI","fillStyle","fill","fillText","toString","startFunction","Buttons","InferenceUI"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container\n    } from 'reactstrap';\n   /* Container, Col, Row,\n    Form, FormGroup, Label, Input,\n    Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\nimport React, {useRef, useEffect} from 'react';\n//import io from 'socket.io-client';\n\nvar almostStreaming = false;\nvar timeStartPressed;\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n\t\tthis.canvasPreview.current.font = \"200px Arial\"\n  }\n  componentDidMount() {\n    navigator.mediaDevices\n\t\t.enumerateDevices()\n\t\t.then( deviceInfos => {\n\t\t\t\tfor (let i = 0; i !== deviceInfos.length; ++i) {\n\t\t\t\t\tconst deviceInfo = deviceInfos[i];\n\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\toption.value = deviceInfo.deviceId;\n\t\t\t\t\tif (deviceInfo.kind === 'videoinput') {\n\t\t\t\t\t\toption.text = deviceInfo.label || 'camera ' +\n\t\t\t\t\t\t\t(this.selectVideoSrc.current.length + 1);\n\t\t\t\t\t\tthis.selectVideoSrc.current.appendChild(option);\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t})\t\t\t\t \n\t\t.then(navigator.mediaDevices\n\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n        window.stream = stream;\n      })\n\t\t);\n  }\n\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasPreviewElement = this.canvasPreview.current;\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n            video,\n            0,\n            0,\n            canvasPreviewElement.width,\n            canvasPreviewElement.height\n          );\n\t\t\t\t\tif(almostStreaming){\n\t\t\t\t\t\tcountdown(5,canvasPreview);\n\t\t\t\t\t}\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const { isVideoLoading } = this.state;\n\n    return (\n      <div>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          style={{ display: \"none\" }}\n        />\n\n        {!isVideoLoading && <canvas ref={this.canvasPreview} id=\"canvasPreview\" />}\n\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\tstyle={{width: 300 }}\n\t\t\t\t/>\n\n      </div>\n    );\n  }\n}\nfunction countdown(seconds,canvas){\n\t\n\t//let context = document.querySelector(\"#canvasPreview\").getContext('2d');\n\tlet context = canvas;\t\n\tlet countdown = seconds - Math.trunc((-timeStartPressed + Date.now())/1000);\n\tconsole.log(countdown);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n  if(countdown >= 10){\n    context.fillText(countdown.toString(10),200,315);\n  }else if(countdown >= 1){\n    context.fillText(countdown.toString(10),270,308,100);\n  }\n\n  context.fill();\n  if (countdown <  1){\n    context.beginPath();\n    context.fillStyle = \"black\";\n    context.fillText(\"0\",260,315);\n    context.fill();\n    //button.state.almostStreaming = false;\n    //button.state.streaming = true;\n    \n  }\n\t\n}\nfunction startFunction(){\n\talmostStreaming = true;\n\ttimeStartPressed = Date.now();\n\tconsole.log(timeStartPressed);\n\n}\nclass Buttons extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttext: \"Start\"\n\t\t}\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<button onClick={() => startFunction()}>{this.state.text}</button>\n\t\t);\n\t}\n}\nclass InferenceUI extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n    \n\n    render() {\n      return (\n\t\t\t\t\t<Container id=\"container\">\n\t\t\t\t\t\t<WebcamStream id=\"asa\"/>\n\t\t\t\t\t\t<Buttons/>\n\t\t\t\t\t</Container>\n        );\n        \n    }\n}\n\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}