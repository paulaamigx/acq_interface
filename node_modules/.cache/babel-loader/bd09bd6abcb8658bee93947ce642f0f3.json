{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js\";\nimport './InferenceUI.css';\nimport React from 'react';\nimport { Button, Alert } from 'reactstrap'; // Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.videoRecorded = null;\n  }\n\n  listDevices() {\n    navigator.mediaDevices.enumerateDevices().then(deviceInfos => {\n      this.selectVideoSrc.current.innerHTML = '';\n      let count = 1;\n      deviceInfos.forEach(deviceInfo => {\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || `Camera ${count++}`;\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      });\n    });\n  }\n\n  setStream() {\n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\");\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.current.value ? {\n          exact: selectVideoSrc.current.value\n        } : undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n      var options = {\n        mimeType: \"video/webm;codecs=vp8\"\n      };\n      this.mediaRecorder = new MediaRecorder(stream, options);\n    });\n  }\n\n  componentDidMount() {\n    this.listDevices();\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvasPreview.current;\n\n        if (canvasPreviewElement) {\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n          if (this.props.currentState.almostStreaming) {\n            canvasPreview.font = \"200px Arial\";\n            countdown(canvasPreview, this);\n          }\n\n          requestAnimationFrame(this.tick);\n        }\n      }\n    }, 50);\n  } //For making video recording\n\n\n  handleDataAvailable(event) {\n    console.log('handleDataAvailable', event);\n\n    if (event.data && event.data.size > 0) {\n      this.recordedChunks.push(event.data);\n      var blob = new Blob(this.recordedChunks, {\n        type: \"video/webm\"\n      });\n      this.videoRecorded = URL.createObjectURL(blob);\n    } else {\n      console.log(\"no data available for recording\");\n    }\n  }\n\n  startRecording() {\n    this.mediaRecorder.ondataavailable = this.handleDataAvailable;\n    this.mediaRecorder.start();\n    this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\", 1));\n  }\n\n  stopRecording() {\n    this.mediaRecorder.stop();\n  }\n\n  downloadVideo() {\n    var aux = document.createElement(\"a\");\n    document.body.appendChild(aux);\n    aux.style = \"display: none\";\n    aux.href = this.videoRecorded;\n    aux.download = \"test.webm\";\n    document.body.appendChild(aux);\n    aux.click();\n  }\n\n  render() {\n    const isVideoLoading = this.state.isVideoLoading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"WebcamStream_Wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      autoPlay: true,\n      id: \"video\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mainDiv\",\n      className: \"container mainDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvasDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, this.props.currentState.canvasAlert && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }, \"Verifique el enfoque del dispositivo.\")), this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 19\n      }\n    }, \"Estableciendo conexi\\xF3n con el servidor.\")), this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      id: \"canvasPreview\",\n      className: \"canvasPreview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    })), !this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"video\", {\n      controls: true,\n      src: this.videoRecorded,\n      width: \"640px\",\n      height: \"480px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }))), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, \"Seleccione un dispositivo de imagen en el panel de configuraci\\xF3n.\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"videoSelectDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => {\n        this.listDevices();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, \"Refrescar\"), /*#__PURE__*/React.createElement(\"select\", {\n      ref: this.selectVideoSrc,\n      style: {\n        width: 300\n      },\n      id: \"videoSelect\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => {\n        this.setStream();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 6\n      }\n    }, \"Ok\")));\n  }\n\n}\n\nfunction countdown(canvas, el) {\n  let context = canvas;\n  let countdown = el.props.countdownFrom - Math.trunc((-el.props.currentState.timeStartPressed + Date.now()) / 1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n  ;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n\n  if (countdown >= 10) {\n    context.fillText(countdown.toString(10), 200, 315);\n  } else if (countdown >= 1) {\n    context.fillText(countdown.toString(10), 270, 308, 100);\n  }\n\n  context.fill();\n\n  if (countdown < 1) {\n    // el.props.currentState.almostStreaming = false;\n    // el.props.currentState.streaming = true;\n    el.props.handler(\"Examination\");\n  }\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js"],"names":["React","Button","Alert","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","selectVideoSrc","tick","bind","mediaRecorder","recordedChunks","videoRecorded","listDevices","navigator","mediaDevices","enumerateDevices","then","deviceInfos","current","innerHTML","count","forEach","deviceInfo","option","document","createElement","value","deviceId","kind","text","label","appendChild","setStream","getElementById","getUserMedia","video","exact","undefined","facingMode","stream","srcObject","requestAnimationFrame","window","options","mimeType","MediaRecorder","componentDidMount","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","height","videoHeight","width","videoWidth","drawImage","currentState","almostStreaming","font","countdown","handleDataAvailable","event","console","log","data","size","push","blob","Blob","type","URL","createObjectURL","startRecording","ondataavailable","start","getVideoThumbnail","toDataURL","stopRecording","stop","downloadVideo","aux","body","style","href","download","click","render","display","canvasAlert","position","zIndex","stateName","localeCompare","renderCanvas","canvas","el","context","countdownFrom","Math","trunc","timeStartPressed","Date","now","beginPath","arc","PI","fillStyle","fill","fillText","toString","handler"],"mappings":"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","sourcesContent":["import './InferenceUI.css'\nimport React from 'react';\nimport {Button, Alert} from 'reactstrap';\n\n// Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true      \n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n\n    this.mediaRecorder = null;\n    this.recordedChunks= [];\n\t  this.videoRecorded = null;\n  }\n\n  listDevices(){\n    navigator.mediaDevices.enumerateDevices()\n    .then((deviceInfos) => {\n      this.selectVideoSrc.current.innerHTML = '';\n      let count = 1;\n      deviceInfos.forEach( deviceInfo => {\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || `Camera ${count++}`;\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      });\n    });\n  }\n\n  setStream(){\n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\");\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.current.value? {exact: selectVideoSrc.current.value}:undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n      var options = { mimeType: \"video/webm;codecs=vp8\" };\n      this.mediaRecorder = new MediaRecorder(stream, options);\n    });\n  }\n\n  componentDidMount() {\n    this.listDevices();\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n          const canvasPreviewElement = this.canvasPreview.current;\n          if(canvasPreviewElement){\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n              video,\n              0,\n              0,\n              canvasPreviewElement.width,\n              canvasPreviewElement.height\n           );\n           if(this.props.currentState.almostStreaming){\n             canvasPreview.font = \"200px Arial\"\n             countdown(canvasPreview,this);\n           }\n           requestAnimationFrame(this.tick);\n           }\n      }\n    }, 50);\n  }\n\n  //For making video recording\n  handleDataAvailable(event){\n\t\tconsole.log('handleDataAvailable',event);\n  \tif (event.data && event.data.size > 0) {\n      this.recordedChunks.push(event.data);\n      var blob = new Blob(this.recordedChunks, {\n        type: \"video/webm\"\n      });\n      this.videoRecorded = URL.createObjectURL(blob);\n  \t}\n\t\telse {\n    \tconsole.log(\"no data available for recording\");\n  \t}\n  }\n\n  startRecording(){\n      this.mediaRecorder.ondataavailable = this.handleDataAvailable;\n      this.mediaRecorder.start();\n      this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\",1));\n  }\n\n\tstopRecording(){\n    this.mediaRecorder.stop();\n\t}\n\n\tdownloadVideo(){\n\t\tvar aux = document.createElement(\"a\");\n\t\tdocument.body.appendChild(aux);\n\t\taux.style = \"display: none\";\n\t\taux.href = this.videoRecorded;\n    aux.download = \"test.webm\";\n    document.body.appendChild(aux);\n\t\taux.click();\t\t\n\t}\n\n  render() {\n    const isVideoLoading = this.state.isVideoLoading;\n    return (\n      <div className=\"WebcamStream_Wrapper\">\n        {/* Dummy video tag to recieve UserMedia stream.*/}\n        <video\n          ref={this.videoTag}\n          autoPlay\n          id = \"video\"\n          style={{ display: \"none\"}}\n        />\n\n        {!isVideoLoading &&\n          <div  id=\"mainDiv\" className=\"container mainDiv\">\n            <div id=\"canvasDiv\">\n              {this.props.currentState.canvasAlert &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"warning\">Verifique el enfoque del dispositivo.</Alert>\n                </div>\n              }\n\n              {this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"info\">Estableciendo conexión con el servidor.</Alert>\n                </div>\n              }\n              \n              {this.props.currentState.renderCanvas &&\n                <div>\n                  <canvas ref={this.canvasPreview}\n                          id=\"canvasPreview\"\n                          className = \"canvasPreview\"/>\n                </div>\n              }\n              {!this.props.currentState.renderCanvas &&\n                <video\n                  controls\n                  src={this.videoRecorded}\n                  width=\"640px\"\n                  height=\"480px\"\n                />\n              }\n            </div>\n          </div>\n        }\n        {isVideoLoading &&\n          <p>Seleccione un dispositivo de imagen en el panel de configuración.</p>\n        }\n\t\t\t\t<div id=\"videoSelectDiv\">\n          <Button color ='primary'\n                  onClick={()=>{this.listDevices();}}\n          >Refrescar</Button>\n\t\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\t\tstyle={{width: 300}}\n\t\t\t\t\t\t\t\t\tid=\"videoSelect\"/>\n\t\t\t\t\t<Button color='primary'\n                  onClick={()=>{this.setStream();}}\n          >Ok</Button>\n\t\t\t\t</div>\n      </div>\n    );\n  }\n}\n\nfunction countdown(canvas,el){\n\tlet context = canvas;\t\n\tlet countdown = el.props.countdownFrom- Math.trunc((-el.props.currentState.timeStartPressed + Date.now())/1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n  if(countdown >= 10){\n    context.fillText(countdown.toString(10),200,315);\n  }else if(countdown >= 1){\n    context.fillText(countdown.toString(10),270,308,100);\n  }\n\n  context.fill();\n  if (countdown <  1){\n    // el.props.currentState.almostStreaming = false;\n    // el.props.currentState.streaming = true;\n\t\tel.props.handler(\"Examination\");\n  }\n}\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}