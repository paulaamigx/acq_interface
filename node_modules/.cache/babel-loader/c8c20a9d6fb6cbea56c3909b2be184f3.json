{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport React from 'react';\nimport WebcamStream from './WebcamStream/WebcamStream.js';\nimport SidePanel from './SidePanel/SidePanel.js';\nimport { manageStates } from './functions.js';\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      stateName: \"Idle\",\n      // Render canvas or video\n      renderCanvas: true,\n      // Canvas Message\n      canvasMessage: \"\",\n      canvasAlert: false,\n      // Progress Bar props\n      showProgressBar: false,\n      progress: 0,\n      // Show Spinner\n      showSpinner: false,\n      // Button state\n      textCtrlBtn: \"Empezar\",\n      enableCtrlBtn: true,\n      enableCaptureBtn: false,\n      // Side Panel\n      enableDownloadsTab: false,\n      enableDiagnosisTab: false,\n      enableConfigTab: true,\n      enableGalleryTab: false,\n      GallerySrc: []\n    };\n    this.childWebcamStream = React.createRef();\n    this.childDiagnosis = React.createRef();\n    this.countdownFrom = 1;\n    this.alertTimeout = null;\n    this.videoThumbnail = null;\n  } // En caso de que venga de review y vaya a idle, limpiar las variables.\n\n\n  async stateHandler(nextState) {\n    await this.setState({\n      stateName: nextState\n    });\n    console.log(\"estado en switch: \" + this.state.stateName);\n    await this.setState(manageStates(this.state.stateName));\n  }\n\n  changeProgress(val) {\n    this.setState({\n      progress: val\n    });\n  }\n\n  async startRecording() {\n    this.childWebcamStream.current.startRecording();\n  }\n\n  async stopRecording() {\n    await this.childWebcamStream.current.stopRecording();\n  }\n\n  getVideoThumbnail(img) {\n    this.videoThumbnail = img;\n  }\n\n  downloadHandler(media) {\n    if (media.localeCompare(\"video\") === 0) {\n      this.childWebcamStream.current.downloadVideo();\n    } else if (media.localeCompare(\"screenshots\") === 0) {\n      console.log(\"in\");\n      this.childWebcamStream.current.downloadScreenshots();\n    }\n  }\n\n  setScreenshots(data) {\n    this.setState({\n      GallerySrc: this.state.GallerySrc.concat(data)\n    });\n  }\n\n  setStream() {\n    this.childWebcamStream.current.setStream();\n  }\n\n  componentDidMount() {\n    this.childDiagnosis.current.listDevices();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(WebcamStream, {\n      currentState: this.state,\n      stateHandler: nextState => this.stateHandler(nextState),\n      changeStateProp: string => this.changeStateProp(string),\n      countdownFrom: this.countdownFrom,\n      ref: this.childWebcamStream,\n      getVideoThumbnail: img => this.getVideoThumbnail(img),\n      setScreenshots: data => this.setScreenshots(data),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(SidePanel, {\n      currentState: this.state,\n      thumbnail: this.videoThumbnail,\n      getScreenshots: () => this.getScreenshots(),\n      setStreamFromConfig: () => {\n        this.setStream();\n      },\n      ref: this.childDiagnosis,\n      downloadHandler: media => this.downloadHandler(media),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }))));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","Row","Col","React","WebcamStream","SidePanel","manageStates","InferenceUI","Component","constructor","props","state","stateName","renderCanvas","canvasMessage","canvasAlert","showProgressBar","progress","showSpinner","textCtrlBtn","enableCtrlBtn","enableCaptureBtn","enableDownloadsTab","enableDiagnosisTab","enableConfigTab","enableGalleryTab","GallerySrc","childWebcamStream","createRef","childDiagnosis","countdownFrom","alertTimeout","videoThumbnail","stateHandler","nextState","setState","console","log","changeProgress","val","startRecording","current","stopRecording","getVideoThumbnail","img","downloadHandler","media","localeCompare","downloadVideo","downloadScreenshots","setScreenshots","data","concat","setStream","componentDidMount","listDevices","render","string","changeStateProp","getScreenshots"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container, Row,Col\n    } from 'reactstrap';\nimport React from 'react';\nimport WebcamStream from './WebcamStream/WebcamStream.js'\nimport SidePanel from './SidePanel/SidePanel.js'\nimport {manageStates} from './functions.js'\n\n\nclass InferenceUI extends React.Component {\n    constructor(props){\n      super();\n      this.state = {\n        stateName: \"Idle\",\n\n        // Render canvas or video\n        renderCanvas: true,\n        // Canvas Message\n        canvasMessage: \"\",\n        canvasAlert: false,\n\n        // Progress Bar props\n        showProgressBar: false,\n        progress: 0,\n        // Show Spinner\n        showSpinner: false,\n        // Button state\n        textCtrlBtn: \"Empezar\",\n        enableCtrlBtn: true,\n        enableCaptureBtn: false,\n\n        // Side Panel\n        enableDownloadsTab: false,\n        enableDiagnosisTab: false,\n        enableConfigTab: true,\n        enableGalleryTab: false,\n        GallerySrc: []\n      }\n\t\t\tthis.childWebcamStream = React.createRef();\n      this.childDiagnosis = React.createRef();\n\t\t\tthis.countdownFrom = 1;\n      this.alertTimeout = null;\n      this.videoThumbnail = null;\n    }\n\n    // En caso de que venga de review y vaya a idle, limpiar las variables.\n\t\tasync stateHandler(nextState){\n\t\t\tawait this.setState({stateName: nextState});\n\t\t  console.log(\"estado en switch: \" + this.state.stateName);\n      await this.setState(manageStates(this.state.stateName));\n\t\t}\n\n\t\n    changeProgress(val){\n      this.setState({progress: val});\n    }\n    \n    async startRecording(){\n      this.childWebcamStream.current.startRecording(); \n    }\n    async stopRecording(){\n      await this.childWebcamStream.current.stopRecording(); \n    }\n    getVideoThumbnail(img){\n      this.videoThumbnail = img;\n    }\n    downloadHandler(media){\n      if(media.localeCompare(\"video\")===0){\n        this.childWebcamStream.current.downloadVideo();\n    }\n    else if(media.localeCompare(\"screenshots\")===0){\n      console.log(\"in\");\n      this.childWebcamStream.current.downloadScreenshots();\n    }\n  }\n  \n  setScreenshots(data){\n    this.setState({GallerySrc: this.state.GallerySrc.concat(data)});\n  }\n  setStream(){\n    this.childWebcamStream.current.setStream();\n  }\n\n  componentDidMount(){\n    this.childDiagnosis.current.listDevices();\n  }\n\n  render() {\n      return (\n\t\t\t\t\t<Container id=\"container\">\n            <Row>\n              <Col xs=\"12\" md=\"8\">\n                <WebcamStream currentState={this.state} \n                              stateHandler={(nextState)=>this.stateHandler(nextState)} \n                              changeStateProp={(string)=>this.changeStateProp(string)}\n                              countdownFrom={this.countdownFrom} \n                              ref={this.childWebcamStream}\n                              getVideoThumbnail={(img)=>this.getVideoThumbnail(img)}\n                              setScreenshots={(data)=>this.setScreenshots(data)}/>\n              </Col>\n              <Col xs=\"12\" md=\"4\">\n                <SidePanel currentState={this.state}\n                              thumbnail={this.videoThumbnail}\n                              getScreenshots={()=>this.getScreenshots()}\n                              setStreamFromConfig={()=>{this.setStream();}}\n                              ref={this.childDiagnosis}\n                              downloadHandler={(media)=>this.downloadHandler(media)}/>\n              </Col>\n            </Row>\n          </Container>\n\t\n        );\n        \n    }\n}\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}