{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/ElementsMain.js\";\nimport { Button, Progress, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useState } from 'react';\nimport './InferenceUI.css';\n\nclass ElementsMain extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openNMAlert: false,\n      fullScreen: false\n    };\n    this.progressBarColor = \"info\"; //reactStrap notation\n\n    this.openNMAlert = false;\n    this.divClass = \"ButtonsRegularScreem\";\n  }\n\n  setProgressBarColor() {\n    let p = parseInt(this.props.currentState.progress, 10);\n\n    if (p < 80) {\n      this.progressBarColor = \"info\";\n    } else if (p < 100) {\n      this.progressBarColor = \"success\";\n    } else {\n      this.progressBarColor = \"danger\";\n    }\n\n    return this.progressBarColor;\n  }\n\n  stopFunction() {\n    stopFunction(this);\n  }\n\n  render() {\n    this.divClass = this.props.currentState.fullScreen ? \"ButtonsFullScreen\" : \"ButtonsRegularScreen\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '640px',\n        position: 'absolute'\n      },\n      id: \"ElementsMain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons\",\n      className: this.divClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, this.props.currentState.showStartBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      id: \"startStopBtn\",\n      size: \"xl\",\n      onClick: () => startStopFunction(this),\n      className: \"default\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, this.props.currentState.textMainBtn), this.props.currentState.showCaptureBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      size: \"l\",\n      disabled: this.props.currentState.disableBtnCapture,\n      onClick: () => this.props.captureScreenshot(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"Capturar Pantalla\"), this.props.currentState.showProgressBar && /*#__PURE__*/React.createElement(Progress, {\n      value: this.props.currentState.progress,\n      color: this.setProgressBarColor(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }), this.state.openNMAlert && /*#__PURE__*/React.createElement(ModalAlertNM, {\n      parent: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"froServer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, \"From Server\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: () => this.props.fromServer(\"blur\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }\n    }, \"Blur\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: () => this.props.fromServer(\"NM\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 6\n      }\n    }, \"NM\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      id: \"range\",\n      onChange: e => {\n        this.props.fromServer(\"progress\", e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nfunction startStopFunction(btn) {\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Empezar\") === 0) {\n    startFunction(btn);\n    return;\n  }\n\n  stopFunction(btn);\n}\n\nfunction startFunction(btn) {\n  btn.props.handler(\"Countdown\");\n  btn.props.currentState.almostStreaming = true;\n  setTimeout(function () {\n    btn.props.startRecording();\n  }, btn.props.countdownFrom * 1000 + 600);\n}\n\nfunction stopFunction(btn) {\n  btn.props.handler(\"StopStream\");\n  btn.props.stopRecording();\n}\n\nconst ModalAlertNM = props => {\n  const {\n    className,\n    parent\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    parent.setState({\n      openNMAlert: false\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Cancelar\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Se ha cortado porque no se detecta la membrana\"), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"Ok\"), ' ')));\n};\n\nexport default ElementsMain;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/ElementsMain.js"],"names":["Button","Progress","Modal","ModalHeader","ModalBody","ModalFooter","React","useState","ElementsMain","Component","constructor","props","state","openNMAlert","fullScreen","progressBarColor","divClass","setProgressBarColor","p","parseInt","currentState","progress","stopFunction","render","width","position","showStartBtn","startStopFunction","textMainBtn","showCaptureBtn","disableBtnCapture","captureScreenshot","showProgressBar","fromServer","e","target","value","btn","localeCompare","startFunction","handler","almostStreaming","setTimeout","startRecording","countdownFrom","stopRecording","ModalAlertNM","className","parent","modal","setModal","toggle","setState"],"mappings":"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","sourcesContent":["import { Button, Progress, Modal, ModalHeader, ModalBody, ModalFooter\n} from 'reactstrap';\nimport React, {useState} from 'react';\nimport './InferenceUI.css'\n\nclass ElementsMain extends React.Component{\n  constructor(props){\n      super(props);\n      this.state = {\n\t\t\t\topenNMAlert: false,\n        fullScreen: false\n      }\n      this.progressBarColor = \"info\"; //reactStrap notation\n\t\t\tthis.openNMAlert = false;\n      this.divClass = \"ButtonsRegularScreem\"\n  }\n\n  setProgressBarColor(){\n    let p =parseInt(this.props.currentState.progress,10);\n    if (p < 80){\n      this.progressBarColor = \"info\";\n    }\n    else if (p < 100){\n      this.progressBarColor = \"success\";\n    }\n    else{\n      this.progressBarColor = \"danger\";\n    }\n    return this.progressBarColor;\n  }\n  stopFunction(){\n    stopFunction(this);\n  }\n\n  render(){\n    this.divClass = (this.props.currentState.fullScreen)? \"ButtonsFullScreen\" : \"ButtonsRegularScreen\";\n    return(\n      <div style={{width: '640px', position:'absolute'}} id=\"ElementsMain\">\n        <div id=\"buttons\" className={this.divClass}>\n         \n        {this.props.currentState.showStartBtn && \n            <Button color=\"primary\"\n                    id= \"startStopBtn\"\n                    size=\"xl\"\n                    onClick={() => startStopFunction(this)}\n                    className=\"default\"\n                    disabled = {true}\n                    >\n\n              {this.props.currentState.textMainBtn}</Button>}\n        {this.props.currentState.showCaptureBtn && \n          <Button color=\"primary\" \n                  size = \"l\"\n                  disabled={this.props.currentState.disableBtnCapture}  \n                  onClick={() => this.props.captureScreenshot()}>\n            {\"Capturar Pantalla\"}</Button>}\n        {this.props.currentState.showProgressBar && \n          <Progress value={this.props.currentState.progress} \n                    color={this.setProgressBarColor()}/>}\n\t\t\t  {this.state.openNMAlert && \n\t\t\t\t\t<ModalAlertNM parent={this}/>}\n        </div>\n        <div id=\"froServer\">\n        <h4>From Server</h4>\n\t\t\t  <Button color= \"secondary\" \n\t\t\t\t\t\t\t\tonClick={()=>this.props.fromServer(\"blur\")}>\n\t\t\t\t\t\t\t\t{\"Blur\"}</Button>\n\t\t\t  <Button color= \"secondary\" \n\t\t\t\t\t\t\t\tonClick={()=>this.props.fromServer(\"NM\")}>\n\t\t\t\t\t\t\t\t{\"NM\"}</Button>\n        <input  type=\"range\" \n\t\t\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\t\t\tmax=\"100\" \n\t\t\t\t\t\t\t\tid=\"range\" \n\t\t\t\t\t\t\t\tonChange={(e)=>{this.props.fromServer(\"progress\",e.target.value);}}/>\n        </div>\n      </div>\n    );\n  }\n}\nfunction startStopFunction(btn){\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Empezar\") === 0){\n    startFunction(btn);\n    return;\n  }\n  stopFunction(btn);\n}\n\nfunction startFunction(btn){\n  btn.props.handler(\"Countdown\");\n  btn.props.currentState.almostStreaming = true;\n  setTimeout(function(){\n   btn.props.startRecording();\n  },btn.props.countdownFrom*1000 + 600);\n}\n  \n\nfunction stopFunction(btn){\n   btn.props.handler(\"StopStream\");\n   btn.props.stopRecording();\n}\n\n\nconst ModalAlertNM = (props) => {\n  const {\n    className,\n\t\tparent\n  } = props;\n\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n\t\tparent.setState({openNMAlert: false});\n\t}\n\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Cancelar</ModalHeader>\n        <ModalBody>\n\t\t\t\t\tSe ha cortado porque no se detecta la membrana\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={toggle}>Ok</Button>{' '}\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\nexport default ElementsMain;\n"]},"metadata":{},"sourceType":"module"}