{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container } from 'reactstrap';\n/* Container, Col, Row,\n Form, FormGroup, Label, Input,\n Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\n\nimport React, { useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\n/*\nconst Canvas = props => {\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n\t\tcanvas.width = 640;\n\t\tcanvas.height= 480;\n\t\tcontext.width= 640;\n\t\tcontext.height= 480;\n\n    context.fillStyle = '#000000'\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n\t\n\t\tvar video = document.querySelector(\"#asa\")\n\t\tconsole.log(\"aa\");\n\t\tconsole.log(video);\n\t\t\n\t\tconst render = () => {\n\t\tcontext.drawImage(video,0,0,context.width,context.height);\n\n\t\t}\n\t\trender()\n\t\treturn() => {\n\n\t\t}\n  }, [])\n\n\t\t\t\t\n\n  return <canvas ref={canvasRef} {...props}/>\n}\n*/\n\nconst useCanvas = draw => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return canvasRef;\n};\n\nconst Canvas = props => {\n  const {\n    draw,\n    ...rest\n  } = props;\n  const canvasRef = useCanvas(draw);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }));\n};\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoTag = React.createRef();\n    this.id = \"\";\n  }\n\n  componentDidMount() {\n    // getting access to webcam\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(stream => this.videoTag.current.srcObject = stream).catch(console.log);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"video\", {\n      id: this.props.id,\n      ref: this.videoTag,\n      width: this.props.width,\n      height: this.props.height,\n      autoPlay: true,\n      title: this.props.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(WebcamStream, {\n      id: \"asa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Canvas, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","React","useRef","useEffect","io","useCanvas","draw","canvasRef","canvas","current","context","getContext","frameCount","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame","Canvas","props","rest","WebcamStream","Component","constructor","videoTag","createRef","id","componentDidMount","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","catch","console","log","width","height","title","InferenceUI","state"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container\n    } from 'reactstrap';\n   /* Container, Col, Row,\n    Form, FormGroup, Label, Input,\n    Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\nimport React, {useRef, useEffect} from 'react';\nimport io from 'socket.io-client';\n/*\nconst Canvas = props => {\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n\t\tcanvas.width = 640;\n\t\tcanvas.height= 480;\n\t\tcontext.width= 640;\n\t\tcontext.height= 480;\n\n    context.fillStyle = '#000000'\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n\t\n\t\tvar video = document.querySelector(\"#asa\")\n\t\tconsole.log(\"aa\");\n\t\tconsole.log(video);\n\t\t\n\t\tconst render = () => {\n\t\tcontext.drawImage(video,0,0,context.width,context.height);\n\n\t\t}\n\t\trender()\n\t\treturn() => {\n\n\t\t}\n  }, [])\n\n\t\t\t\t\n\n  return <canvas ref={canvasRef} {...props}/>\n}\n*/\nconst useCanvas = draw => {\n  \n  const canvasRef = useRef(null)\n  \n  useEffect(() => {\n    \n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    let frameCount = 0\n    let animationFrameId\n    \n    const render = () => {\n      frameCount++\n      draw(context, frameCount)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n    \n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n  \n  return canvasRef\n}\n\nconst Canvas = props => {  \n  \n  const { draw, ...rest } = props\n  const canvasRef = useCanvas(draw)\n  \n  return <canvas ref={canvasRef} {...rest}/>\n}\n\n\n\n\nclass WebcamStream extends React.Component {\n    constructor(props) {\n        super(props);\n        this.videoTag = React.createRef()\n\t\t\t\tthis.id = \"\"\n    }\n\n    componentDidMount() {\n        // getting access to webcam\n       navigator.mediaDevices\n            .getUserMedia({video: true})\n            .then(stream => this.videoTag.current.srcObject = stream)\n            .catch(console.log);\n    }\n\n    render() {\n        return <video id={this.props.id}\n                      ref={this.videoTag}\n                      width={this.props.width}\n                      height={this.props.height}\n                      autoPlay\n                      title={this.props.title}></video>\n    }\n}\nclass InferenceUI extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n\t\n    render() {\n        return (\n\t\t\t\t\t<Container id=\"container\">\n\t\t\t\t\t\t<WebcamStream id=\"asa\"/>\n\t\t\t\t\t\t<Canvas/>\n\t\t\t\t\t</Container>\n        );\n        \n    }\n}\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}