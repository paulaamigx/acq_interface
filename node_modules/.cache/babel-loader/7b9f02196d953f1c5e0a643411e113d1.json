{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container } from 'reactstrap';\n/* Container, Col, Row,\n Form, FormGroup, Label, Input,\n Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\n\nimport React, { useRef, useEffect } from 'react'; //import io from 'socket.io-client';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: \"environment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvas.current;\n        const canvasPreview = canvasElement.getContext(\"2d\");\n        canvasPreviewElement.height = video.videoHeight;\n        canvasPreviewElement.width = video.videoWidth;\n        canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const {\n      isVideoLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      width: \"400\",\n      height: \"400\",\n      autoPlay: true,\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 28\n      }\n    }, \"Please wait while we load the video stream.\"));\n  }\n\n}\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(WebcamStream, {\n      id: \"asa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","React","useRef","useEffect","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","tick","bind","componentDidMount","navigator","mediaDevices","getUserMedia","video","facingMode","then","stream","current","srcObject","requestAnimationFrame","window","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","canvas","canvasElement","getContext","height","videoHeight","width","videoWidth","drawImage","render","display","InferenceUI"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container\n    } from 'reactstrap';\n   /* Container, Col, Row,\n    Form, FormGroup, Label, Input,\n    Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\nimport React, {useRef, useEffect} from 'react';\n//import io from 'socket.io-client';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n        window.stream = stream;\n      });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasPreviewElement = this.canvas.current;\n          const canvasPreview = canvasElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n            video,\n            0,\n            0,\n            canvasPreviewElement.width,\n            canvasPreviewElement.height\n          );\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const { isVideoLoading } = this.state;\n\n    return (\n      <div>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          style={{ display: \"none\" }}\n        />\n\n        {!isVideoLoading && <canvas ref={this.canvasPreview} />}\n\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n      </div>\n    );\n  }\n}\nclass InferenceUI extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n\t\n    render() {\n        return (\n\t\t\t\t\t<Container id=\"container\">\n\t\t\t\t\t\t<WebcamStream id=\"asa\"/>\n\t\t\t\t\t</Container>\n        );\n        \n    }\n}\n\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}