{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/ElementsMain.js\";\nimport { Button, Progress, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './InferenceUI.css';\n\nclass ElementsMain extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openNMAlert: false,\n      fullScreen: false\n    };\n    this.progressBarColor = \"info\"; //reactStrap notation\n\n    this.openNMAlert = false;\n  }\n\n  setProgressBarColor() {\n    let p = parseInt(this.props.currentState.progress, 10);\n\n    if (p < 80) {\n      this.progressBarColor = \"info\";\n    } else if (p < 100) {\n      this.progressBarColor = \"success\";\n    } else {\n      this.progressBarColor = \"danger\";\n    }\n\n    return this.progressBarColor;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mainElements\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, this.props.currentState.showStartBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => startStopFunction(this),\n      className: \"default\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, this.props.currentState.textMainBtn), this.props.currentState.showCaptureBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      disabled: this.props.currentState.disableBtnCapture,\n      onClick: () => this.props.captureScreenshot(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, \"Capture Screenshot\"), this.props.currentState.showProgressBar && /*#__PURE__*/React.createElement(Progress, {\n      value: this.props.currentState.progress,\n      color: this.setProgressBarColor(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }), this.state.openNMAlert && /*#__PURE__*/React.createElement(ModalAlertNM, {\n      parent: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"froServer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, \"From Server\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: () => this.props.fromServer(\"blur\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 6\n      }\n    }, \"Blur\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: () => this.props.fromServer(\"NM\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 6\n      }\n    }, \"NM\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      id: \"range\",\n      onChange: e => {\n        this.props.fromServer(\"progress\", e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: () => {\n        let el = document.getElementById(\"previewDiv\");\n        let canvas = document.getElementById(\"canvasPreview\");\n        let btns = document.getElementById(\"mainElements\");\n        el.appendChild(btns);\n        console.log(btns);\n        let below = document.getElementById(\"belowCanvas\");\n        el.style.overflow = \"auto\";\n        canvas.style.height = window.screen.height + \"px\";\n        below.style.top = window.screen.height + \"px\";\n        console.log(canvas.height);\n\n        if (el.webkitRequestFullScreen) {\n          el.webkitRequestFullScreen();\n        } else {\n          el.mozRequestFullScreen();\n        }\n\n        this.setState({\n          fullScreen: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }\n    }, \"FP\")));\n  }\n\n}\n\nfunction startStopFunction(btn) {\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Start\") === 0) {\n    startFunction(btn);\n    return;\n  }\n\n  stopFunction(btn);\n}\n\nfunction startFunction(btn) {\n  console.log(btn.props);\n  btn.props.handler(\"Countdown\");\n  btn.props.currentState.almostStreaming = true;\n  setTimeout(function () {\n    btn.props.startRecording();\n  }, btn.props.countdownFrom * 1000 + 600);\n}\n\nfunction stopFunction(btn) {\n  btn.props.handler(\"StopStream\");\n  btn.props.stopRecording();\n}\n\nconst ModalAlertNM = props => {\n  const {\n    className,\n    parent\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    //setModal(!modal);\n    parent.setState({\n      openNMAlert: false\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \"Cancelar\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Se ha cortado porque no se detecta la membrana\"), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Ok\"), ' ')));\n};\n\nexport default ElementsMain;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/ElementsMain.js"],"names":["Button","Progress","Modal","ModalHeader","ModalBody","ModalFooter","React","useState","Container","Row","Col","ElementsMain","Component","constructor","props","state","openNMAlert","fullScreen","progressBarColor","setProgressBarColor","p","parseInt","currentState","progress","render","showStartBtn","startStopFunction","textMainBtn","showCaptureBtn","disableBtnCapture","captureScreenshot","showProgressBar","fromServer","e","target","value","el","document","getElementById","canvas","btns","appendChild","console","log","below","style","overflow","height","window","screen","top","webkitRequestFullScreen","mozRequestFullScreen","setState","btn","localeCompare","startFunction","stopFunction","handler","almostStreaming","setTimeout","startRecording","countdownFrom","stopRecording","ModalAlertNM","className","parent","modal","setModal","toggle"],"mappings":"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","sourcesContent":["import { Button, Progress, Modal, ModalHeader, ModalBody, ModalFooter\n} from 'reactstrap';\nimport React, {useState} from 'react';\nimport {Container, Row, Col } from 'react-bootstrap';\nimport './InferenceUI.css'\n\nclass ElementsMain extends React.Component{\n  constructor(props){\n      super(props);\n      this.state = {\n\t\t\t\topenNMAlert: false,\n        fullScreen: false\n      }\n      this.progressBarColor = \"info\"; //reactStrap notation\n\t\t\tthis.openNMAlert = false;\n  }\n\n  setProgressBarColor(){\n    let p =parseInt(this.props.currentState.progress,10);\n    if (p < 80){\n      this.progressBarColor = \"info\";\n    }\n    else if (p < 100){\n      this.progressBarColor = \"success\";\n    }\n    else{\n      this.progressBarColor = \"danger\";\n    }\n    return this.progressBarColor;\n  }\n  \n\n  render(){\n    return(\n      <div>\n        <div id=\"mainElements\">\n        \n        {this.props.currentState.showStartBtn && \n            <Button color=\"primary\" \n                    onClick={() => startStopFunction(this)}\n                    className=\"default\">\n              {this.props.currentState.textMainBtn}</Button>}\n        {this.props.currentState.showCaptureBtn && \n          <Button color=\"primary\" \n                  disabled={this.props.currentState.disableBtnCapture}  \n                  onClick={() => this.props.captureScreenshot()}>\n            {\"Capture Screenshot\"}</Button>}\n        {this.props.currentState.showProgressBar && \n          <Progress value={this.props.currentState.progress} \n                    color={this.setProgressBarColor()}/>}\n\t\t\t  {this.state.openNMAlert && \n\t\t\t\t\t<ModalAlertNM parent={this}/>}\n        </div>\n        <div id=\"froServer\">\n        <h4>From Server</h4>\n\t\t\t  <Button color= \"secondary\" \n\t\t\t\t\t\t\t\tonClick={()=>this.props.fromServer(\"blur\")}>\n\t\t\t\t\t\t\t\t{\"Blur\"}</Button>\n\t\t\t  <Button color= \"secondary\" \n\t\t\t\t\t\t\t\tonClick={()=>this.props.fromServer(\"NM\")}>\n\t\t\t\t\t\t\t\t{\"NM\"}</Button>\n        <input  type=\"range\" \n\t\t\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\t\t\tmax=\"100\" \n\t\t\t\t\t\t\t\tid=\"range\" \n\t\t\t\t\t\t\t\tonChange={(e)=>{this.props.fromServer(\"progress\",e.target.value);}}/>\n\t\t\t  <Button color= \"secondary\"\n                onClick={()=>{\n                  let el = document.getElementById(\"previewDiv\");\n                  let canvas  = document.getElementById(\"canvasPreview\");\n                  let btns = document.getElementById(\"mainElements\");\n                  el.appendChild(btns);\n                  console.log(btns)\n                  let below = document.getElementById(\"belowCanvas\");\n                  el.style.overflow = \"auto\";\n                  canvas.style.height = window.screen.height + \"px\";\n                  below.style.top =  window.screen.height + \"px\";\n                  console.log(canvas.height);\n                  if(el.webkitRequestFullScreen) {\n                    el.webkitRequestFullScreen();\n                    \n                  }\n                  else {\n                    el.mozRequestFullScreen();\n                  } \n                  this.setState({fullScreen: true});\n                }}>\n      \n                {\"FP\"} \n        </Button>\n        </div>\n      </div>\n    );\n  }\n}\nfunction startStopFunction(btn){\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Start\") === 0){\n    startFunction(btn);\n    return;\n  }\n  stopFunction(btn);\n}\n\nfunction startFunction(btn){\n  console.log(btn.props)\n  btn.props.handler(\"Countdown\");\n  btn.props.currentState.almostStreaming = true;\n  setTimeout(function(){\n   btn.props.startRecording();\n      },btn.props.countdownFrom*1000 + 600);\n  }\n  \n\nfunction stopFunction(btn){\n   btn.props.handler(\"StopStream\");\n   btn.props.stopRecording();\n}\n\n\nconst ModalAlertNM = (props) => {\n  const {\n    className,\n\t\tparent\n  } = props;\n\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n\t\t\t\t\t//setModal(!modal);\n\t\t\t\t\tparent.setState({openNMAlert: false});\n\t\t\t\t\t}\n\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Cancelar</ModalHeader>\n        <ModalBody>\n\t\t\t\t\tSe ha cortado porque no se detecta la membrana\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={toggle}>Ok</Button>{' '}\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\nexport default ElementsMain;\n"]},"metadata":{},"sourceType":"module"}