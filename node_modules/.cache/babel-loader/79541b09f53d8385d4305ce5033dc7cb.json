{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js\";\nimport './WebcamStream.css';\nimport React from 'react';\nimport { Button, Alert, Progress } from 'reactstrap';\nimport { handleDataAvailable, setProgressBarColor, ctrlBtnFunction, countdown, urlToPromise, downloadScreenshots, downloadVideo, captureScreenshot } from './functions.js'; // Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.countdownFrom = 1;\n    this.timeStartPressed = null;\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.videoRecorded = null;\n    this.mirrorCountHorizontal = 0;\n    this.mirrorCountVertical = 0;\n  }\n\n  setStream() {\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\"); // Falta cerrar el stream anterior antes de abrir uno nuevo.\n\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.value ? {\n          exact: selectVideoSrc.value\n        } : undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n      var options = {\n        mimeType: \"video/webm;codecs=vp8\"\n      };\n      this.mediaRecorder = new MediaRecorder(stream, options);\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvasPreview.current;\n\n        if (canvasPreviewElement) {\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n          if (this.props.currentState.stateName.localeCompare(\"Countdown\") === 0) {\n            canvasPreview.font = \"200px Arial\";\n            countdown(canvasPreview, this);\n          }\n\n          requestAnimationFrame(this.tick);\n        }\n      }\n    }, 50);\n  }\n\n  startRecording() {\n    this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n    this.mediaRecorder.start();\n    this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\", 1));\n  }\n\n  stopRecording() {\n    this.mediaRecorder.stop();\n  }\n\n  downloadVideo() {\n    downloadVideo(this);\n  }\n\n  captureScreenshot() {\n    captureScreenshot(this);\n  }\n\n  downloadScreenshots() {\n    downloadScreenshots(this);\n  }\n\n  mirror(way) {\n    mirror(this, way);\n  }\n\n  componentDidMount() {\n    //initial message on canvas\n    let cnvs = document.getElementById(\"canvasMessage\");\n    cnvs.style.height = cnvs.clientWidth * 3 / 4 + \"px\";\n    cnvs.style.backgroundColor = \"black\";\n    var ctx = cnvs.getContext(\"2d\");\n    ctx.font = \"10px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(\"Seleccione un dispositivo de imagen en\", cnvs.width / 10, 3 * cnvs.height / 8);\n    ctx.fillText(\"el panel de  configuración.\", cnvs.width / 10, 4 * cnvs.height / 8);\n  }\n\n  render() {\n    const isVideoLoading = this.state.isVideoLoading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"WebcamStream_Wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      autoPlay: true,\n      id: \"video\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvasDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, this.props.currentState.canvasAlert && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 19\n      }\n    }, \"Verifique el enfoque del dispositivo.\")), this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 19\n      }\n    }, \"Estableciendo conexi\\xF3n con el servidor.\")), this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      id: \"canvasPreview\",\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    })), !this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"video\", {\n      id: \"recordedVideoElement\",\n      controls: true,\n      srcObject: null,\n      src: null,\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    })), isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvasMessage\",\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }, \"Seleccione un dispositivo de imagen en el panel de configuraci\\xF3n.\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      size: \"xl\",\n      onClick: () => {\n        ctrlBtnFunction(this);\n      },\n      disabled: !this.props.currentState.enableCtrlBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, this.props.currentState.textCtrlBtn), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      size: \"l\",\n      disabled: !this.props.currentState.enableCaptureBtn,\n      onClick: () => this.captureScreenshot(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, \"Capturar Pantalla\"), this.props.currentState.showProgressBar && /*#__PURE__*/React.createElement(Progress, {\n      value: this.props.currentState.progress,\n      color: setProgressBarColor(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction mirror(el, way) {\n  let canvas = document.querySelector(\"#canvasPreview\");\n\n  if (way.localeCompare(\"horizontal\")) {\n    if (el.mirrorCountHorizontal % 2 === 0) {\n      canvas.style.transform = \"translate(640,0)\";\n      canvas.style.transform = \"scale(-1,1)\";\n    } else {\n      canvas.style.transform = \"translate(-640,0)\";\n      canvas.style.transform = \"scale(1,1)\";\n    }\n\n    el.mirrorCountHorizontal++;\n  } else if (way.localeCompare(\"vertical\")) {\n    console.log(\"mm\");\n\n    if (el.mirrorCountVertical % 2 === 0) {\n      canvas.style.transform = \"translate(0,480)\";\n      canvas.style.transform = \"scale(-1,-1)\";\n    } else {\n      canvas.style.transform = \"translate(-640,0)\";\n      canvas.style.transform = \"scale(1,1)\";\n    }\n\n    el.mirrorCountVertical++;\n  }\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js"],"names":["React","Button","Alert","Progress","handleDataAvailable","setProgressBarColor","ctrlBtnFunction","countdown","urlToPromise","downloadScreenshots","downloadVideo","captureScreenshot","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","selectVideoSrc","tick","bind","countdownFrom","timeStartPressed","mediaRecorder","recordedChunks","videoRecorded","mirrorCountHorizontal","mirrorCountVertical","setStream","document","getElementById","navigator","mediaDevices","getUserMedia","video","deviceId","value","exact","undefined","facingMode","then","stream","current","srcObject","requestAnimationFrame","window","options","mimeType","MediaRecorder","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","height","videoHeight","width","videoWidth","drawImage","currentState","stateName","localeCompare","font","startRecording","ondataavailable","start","getVideoThumbnail","toDataURL","stopRecording","stop","mirror","way","componentDidMount","cnvs","style","clientWidth","backgroundColor","ctx","fillStyle","fillText","render","display","canvasAlert","position","zIndex","renderCanvas","enableCtrlBtn","textCtrlBtn","enableCaptureBtn","showProgressBar","progress","el","canvas","querySelector","transform","console","log"],"mappings":"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","sourcesContent":["import './WebcamStream.css'\nimport React from 'react';\nimport {Button, Alert, Progress} from 'reactstrap';\n\n\n\nimport {handleDataAvailable, setProgressBarColor, ctrlBtnFunction, countdown, \n        urlToPromise, downloadScreenshots, downloadVideo, captureScreenshot} from './functions.js';\n\n// Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n\n    this.countdownFrom = 1;\n    this.timeStartPressed = null;\n\n    this.mediaRecorder = null;\n    this.recordedChunks= [];\n\t  this.videoRecorded = null;\n\n    this.mirrorCountHorizontal = 0;\n    this.mirrorCountVertical = 0;\n  }\n\n  setStream(){\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\");\n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.value? {exact: selectVideoSrc.value}:undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n      var options = { mimeType: \"video/webm;codecs=vp8\" };\n      this.mediaRecorder = new MediaRecorder(stream, options);\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n          const canvasPreviewElement = this.canvasPreview.current;\n          if(canvasPreviewElement){\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n              video,\n              0,\n              0,\n              canvasPreviewElement.width,\n              canvasPreviewElement.height\n           );\n           if(this.props.currentState.stateName.localeCompare(\"Countdown\")===0){\n             canvasPreview.font = \"200px Arial\"\n             countdown(canvasPreview,this);\n           }\n           requestAnimationFrame(this.tick);\n           }\n      }\n    }, 50);\n  }\n\n  startRecording(){\n      this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n      this.mediaRecorder.start();\n      this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\",1));\n  }\n\n\tstopRecording(){\n    this.mediaRecorder.stop();\n\t}\n\n\tdownloadVideo(){\n\t\tdownloadVideo(this);\t\n\t}\n  \n  captureScreenshot(){\n    captureScreenshot(this);\n    }\n\n  downloadScreenshots(){\n    downloadScreenshots(this);\n  }\n  \n  mirror(way){\n    mirror(this,way);\n  }\n  componentDidMount(){\n\t\t//initial message on canvas\n    let cnvs = document.getElementById(\"canvasMessage\");\n    cnvs.style.height = cnvs.clientWidth*3/4+\"px\";\n\t\tcnvs.style.backgroundColor= \"black\";\n\t\tvar ctx = cnvs.getContext(\"2d\");\n\t\tctx.font = \"10px Arial\";\n\t\tctx.fillStyle = \"white\";\n\t\tctx.fillText(\"Seleccione un dispositivo de imagen en\" , cnvs.width/10, 3*cnvs.height/8);\n\t\tctx.fillText(\"el panel de  configuración.\", cnvs.width/10, 4*cnvs.height/8);\n  }\n\n  render() {\n    const isVideoLoading = this.state.isVideoLoading;\n    return (\n      <div className=\"WebcamStream_Wrapper\">\n        {/* Dummy video tag to recieve UserMedia stream.*/}\n        <video\n          ref={this.videoTag}\n          autoPlay\n          id = \"video\"\n          style={{ display: \"none\"}}\n        />\n\n        {!isVideoLoading &&\n            <div id=\"canvasDiv\">\n              {this.props.currentState.canvasAlert &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"warning\">Verifique el enfoque del dispositivo.</Alert>\n                </div>\n              }\n\n              {this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"info\">Estableciendo conexión con el servidor.</Alert>\n                </div>\n              }\n              \n              {this.props.currentState.renderCanvas &&\n                <div>\n                  <canvas ref={this.canvasPreview}\n                          id=\"canvasPreview\"\n                          className=\"canvasRendered\"/>\n\n                </div>\n              }\n              {!this.props.currentState.renderCanvas &&\n                <video\n                  id = \"recordedVideoElement\"\n                  controls\n                  srcObject = {null}\n                  src={null}\n                  className=\"canvasRendered\"/>\n              }\n            </div>\n        }\n        {isVideoLoading &&\n          <div>\n            <canvas id=\"canvasMessage\"\n                    className=\"canvasRendered\"/>\n          <p>Seleccione un dispositivo de imagen en el panel de configuración.</p>\n            \n          </div>\n        }\n\t\t\t\t<div id=\"buttons\">\n          <Button color=\"primary\"\n                  size=\"xl\"\n                  onClick={()=>{ctrlBtnFunction(this);}}\n                  disabled={!this.props.currentState.enableCtrlBtn}>\n                  {this.props.currentState.textCtrlBtn}</Button>\n          <Button color=\"primary\" \n                  size = \"l\"\n                  disabled={!this.props.currentState.enableCaptureBtn}  \n                  onClick={() => this.captureScreenshot()}>\n            {\"Capturar Pantalla\"}</Button>\n        {this.props.currentState.showProgressBar && \n          <Progress value={this.props.currentState.progress} \n                    color={setProgressBarColor(this)}/>}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mirror(el,way){\n  let canvas = document.querySelector(\"#canvasPreview\");\n  if(way.localeCompare(\"horizontal\")){\n    if (el.mirrorCountHorizontal%2 === 0){\n      canvas.style.transform = \"translate(640,0)\";\n      canvas.style.transform = \"scale(-1,1)\";\n    }\n    else{\n     canvas.style.transform = \"translate(-640,0)\";\n      canvas.style.transform = \"scale(1,1)\";\n    }\n    el.mirrorCountHorizontal ++;\n  }\n  else if(way.localeCompare(\"vertical\")){\n      console.log(\"mm\");\n    if (el.mirrorCountVertical%2 === 0){\n      canvas.style.transform = \"translate(0,480)\";\n      canvas.style.transform = \"scale(-1,-1)\";\n    }\n    else{\n     canvas.style.transform = \"translate(-640,0)\";\n      canvas.style.transform = \"scale(1,1)\";\n    }\n    el.mirrorCountVertical ++;\n  }\n}\n\n\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}