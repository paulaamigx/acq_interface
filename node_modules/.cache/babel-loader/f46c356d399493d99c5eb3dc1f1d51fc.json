{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container, Button, Modal, ModalHeader, ModalBody, ModalFooter, Progress, Spinner } from 'reactstrap';\nimport React, { useState } from 'react'; //import io from 'socket.io-client';\n\nimport WebcamStream from './WebcamStream.js';\nimport Screenshots from './Screenshots.js';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\n/*\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n  componentDidMount() {\n    navigator.mediaDevices\n\t\t.enumerateDevices()\n\t\t.then( deviceInfos => {\n\t\t\t\tfor (let i = 0; i !== deviceInfos.length; ++i) {\n\t\t\t\t\tconst deviceInfo = deviceInfos[i];\n\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\toption.value = deviceInfo.deviceId;\n\t\t\t\t\tif (deviceInfo.kind === 'videoinput') {\n\t\t\t\t\t\toption.text = deviceInfo.label || 'camera ' +\n\t\t\t\t\t\t\t(this.selectVideoSrc.current.length + 1);\n\t\t\t\t\t\tthis.selectVideoSrc.current.appendChild(option);\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t})\t\t\t\t \n\t\t.then(navigator.mediaDevices\n\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n        window.stream = stream;\n      })\n\t\t);\n  }\n\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasPreviewElement = this.canvasPreview.current;\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n            video,\n            0,\n            0,\n            canvasPreviewElement.width,\n            canvasPreviewElement.height\n          );\n\t\t\t\t\tif(this.props.currentState.almostStreaming){\n\t\t\t\t\t\tcanvasPreview.font = \"200px Arial\"\n\t\t\t\t\t\tcountdown(canvasPreview,this);\n\t\t\t\t\t}\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const { isVideoLoading } = this.state;\n\n    return (\n      <div>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          style={{ display: \"none\" }}\n        />\n\n        {!isVideoLoading && <canvas ref={this.canvasPreview} id=\"canvasPreview\" />}\n\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n\t\t\t\t<div id=\"videoSelectDiv\">\n\t\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\t\tstyle={{width: 300 }}\n\t\t\t\t\t\t\t\t\tid=\"videoSelect\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t/>\n\t\t\t\t\t<Button color='primary' onClick={()=>{\n\t\t\t\t\t\t\t\t\t\tconsole.log(this.props);\n\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"videoSelectDiv\").remove();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tthis.props.handler(\"OnConnection\");\n\t\t\t\t\t}}>Ok</Button>\n\t\t\t\t</div>\n\n      </div>\n    );\n  }\n}\nfunction countdown(canvas,el){\n\tlet context = canvas;\t\n\tlet countdown = el.props.countdownFrom- Math.trunc((-el.props.currentState.timeStartPressed + Date.now())/1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n  if(countdown >= 10){\n    context.fillText(countdown.toString(10),200,315);\n  }else if(countdown >= 1){\n    context.fillText(countdown.toString(10),270,308,100);\n  }\n\n  context.fill();\n  if (countdown <  1){\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n\t\tel.props.handler(\"Streaming\");\n  }\n\t\n}\n\n*/\n\nvar Carousel = require('react-responsive-carousel').Carousel;\n\nconst ModalDiagnosis = props => {\n  const {\n    className\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal);\n    props.handlerSuper();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    size: 'xl',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"Modal title\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    color: \"info\",\n    style: {\n      position: 'absolute',\n      margin: 'auto'\n    },\n    size: 'xl',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 6\n    }\n  }))));\n};\n/*\nconst ModalScreenshots = (props) => {\n  const {\n    className,\n    data,\t\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal); \n\t\tprops.handler();\n  }\n  console.log(\"as\");\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className} size={'xl'}>\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n        <ModalBody>\n        <Carousel showArrows={true} selectedItem={0} >\n          {data.map((slide) =>\n            <div key={0}>\n              <img className=\"slick-slide-image\" src={slide.src} alt='Error' />\n            </div>\n          )}\n        </Carousel>\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\nclass Screenshots extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      lastScreenshotID: 0,\n      modalOn: false,\n      slidesData: []\n    };\n  }\n\n\tcaptureScreenshot = async () => {\n  \tvar canvas = document.querySelector(\"#canvasPreview\");\n\t\tvar imgAsDataURL = canvas.toDataURL(\"image/jpeg\",1);\n    \n    let newSlidesData = [{src: imgAsDataURL}];\n\t\tthis.setState({slidesData: this.state.slidesData.concat(newSlidesData)});\n\t\tawait this.setState({lastScreenshotID: this.state.lastScreenshotID+1});\n\t\t\n\t  let thumbs = document.getElementsByClassName(\"thumb\");\n\t\tthumbs[thumbs.length-1].onclick = async() => {\n\t\t\tif(this.props.currentState.showModalScreenshots){\n        this.setState({modalOn: true});\n\t\t\t}\n\t\t};\t\n\n    let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\t\ttry{\n\t\t\tbtnsCarousel[2].style.backgroundColor= 'black';\n\t\t\tbtnsCarousel[3].style.backgroundColor= 'black';\n\t\t}\n\t\tcatch{\n\t\t\n\t\t}\n\t\tdocument.querySelector(\".carousel-slider\").style.display = 'none';\n\n}\n\trender(){\n    return(\n\t\t\t<div>\n\t\t\t\t{this.state.modalOn && <ModalScreenshots handler={()=>{this.setState({modalOn:false})}} data={this.state.slidesData}/>}\n        <Carousel showArrows={true} selectedItem={this.state.lastScreenshotID} >\n          {this.state.slidesData.map((slide) =>\n            <div key={this.state.lastScreenshotID}>\n              <img className=\"slick-slide-image\" src={slide.src} alt='' />\n            </div>\n          )}\n        </Carousel>\n\t\t\t</div>\n    );\n\t}\n\n}\n*/\n\n\nfunction startStopFunction(btn) {\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Start\") === 0) {\n    btn.props.handler(\"Countdown\");\n    startFunction(btn);\n    return;\n  }\n\n  btn.props.handler(\"StopStream\"); //stopFunction();\n}\n\nfunction startFunction(btn) {\n  btn.props.currentState.almostStreaming = true; //btn.props.timeStartPressed = Date.now();\n}\n\nclass Diagnosis extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 4\n      }\n    }, this.props.currentState.showModalDiagnosis && /*#__PURE__*/React.createElement(ModalDiagnosis, {\n      handlerSuper: () => {\n        this.props.handler(\"closeDiagnosis\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 52\n      }\n    }));\n  }\n\n}\n\nclass ComponentsMain extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 4\n      }\n    }, this.props.currentState.showStartBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => startStopFunction(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 45\n      }\n    }, this.props.currentState.textMainBtn), this.props.currentState.showCaptureBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      disabled: this.props.currentState.disableBtnCapture,\n      onClick: () => this.props.captureScreenshot(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 47\n      }\n    }, \"Capture Screenshot\"), this.props.currentState.showProgressBar && /*#__PURE__*/React.createElement(Progress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 48\n      }\n    }));\n  }\n\n}\n\nfunction manageStates(state) {\n  var flags = {};\n\n  switch (state) {\n    case 'OnConnection':\n      flags = {\n        textMainBtn: \"Start\",\n        showStartBtn: true,\n        showCaptureBtn: true,\n        showVideoSelect: false,\n        showProgressBar: false,\n        showModalScreenshots: true,\n        //if requested\n        showModalDiagnosis: false,\n        disableBtnCapture: false,\n        streaming: false,\n        almostStreaming: false\n      };\n      break;\n\n    case 'Countdown':\n      flags = {\n        textMainBtn: \"Stop\",\n        showStartBtn: true,\n        showCaptureBtn: true,\n        showVideoSelect: false,\n        showProgressBar: true,\n        showModalScreenshots: false,\n        //if requested\n        showModalDiagnosis: false,\n        disableBtnCapture: true,\n        streaming: false,\n        almostStreaming: true,\n        timeStartPressed: Date.now()\n      };\n      break;\n\n    case 'Streaming':\n      flags = {\n        textMainBtn: \"Stop\",\n        showStartBtn: true,\n        showCaptureBtn: true,\n        showVideoSelect: false,\n        showProgressBar: true,\n        showModalScreenshots: false,\n        //if requested\n        showModalDiagnosis: false,\n        disableBtnCapture: false,\n        streaming: true,\n        almostStreaming: false\n      };\n      break;\n\n    case 'StopStream':\n      flags = {\n        textMainBtn: \"Start\",\n        showStartBtn: true,\n        showCaptureBtn: true,\n        showVideoSelect: false,\n        showProgressBar: true,\n        showModalScreenshots: false,\n        //if requested\n        showModalDiagnosis: false,\n        disableBtnCapture: true,\n        streaming: false,\n        almostStreaming: true\n      };\n      break;\n\n    case 'closeDiagnosis':\n      flags = {\n        showModalDiagnosis: false\n      };\n      break;\n\n    default:\n      console.log('State not defined');\n  }\n\n  return flags;\n}\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: \"SelectingSource\",\n      textMainBtn: \"Start\",\n      showStartBtn: false,\n      showCaptureBtn: false,\n      showVideoSelect: false,\n      showProgressBar: false,\n      showModalScreenshots: false,\n      //if requested\n      showModalDiagnosis: false,\n      disableBtnCapture: false,\n      streaming: false,\n      almostStreaming: false,\n      timeStartPressed: 0,\n      triggerCaptureScreenshot: false\n    };\n    this.child = React.createRef();\n    this.countdownFrom = 1;\n  }\n\n  async handler(nextState) {\n    await this.setState({\n      current: nextState\n    });\n    console.log(\"estado en switch: \" + this.state.current);\n    await this.setState(manageStates(this.state.current));\n  }\n\n  captureScreenshot() {\n    this.child.current.captureScreenshot();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(WebcamStream, {\n      id: \"WebcamStream\",\n      currentState: this.state,\n      handler: nextState => this.handler(nextState),\n      countdownFrom: this.countdownFrom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(ComponentsMain, {\n      currentState: this.state,\n      handler: nextState => this.handler(nextState),\n      captureScreenshot: () => this.captureScreenshot(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Screenshots, {\n      currentState: this.state,\n      handler: nextState => this.handler(nextState),\n      ref: this.child,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Diagnosis, {\n      currentState: this.state,\n      handler: nextState => this.handler(nextState),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","Button","Modal","ModalHeader","ModalBody","ModalFooter","Progress","Spinner","React","useState","WebcamStream","Screenshots","Carousel","require","ModalDiagnosis","props","className","modal","setModal","toggle","handlerSuper","position","margin","startStopFunction","btn","currentState","textMainBtn","localeCompare","handler","startFunction","almostStreaming","Diagnosis","Component","constructor","state","render","showModalDiagnosis","ComponentsMain","showStartBtn","showCaptureBtn","disableBtnCapture","captureScreenshot","showProgressBar","manageStates","flags","showVideoSelect","showModalScreenshots","streaming","timeStartPressed","Date","now","console","log","InferenceUI","current","triggerCaptureScreenshot","child","createRef","countdownFrom","nextState","setState"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container, Button, Modal, ModalHeader, ModalBody, ModalFooter, Progress, Spinner\n    } from 'reactstrap';\nimport React, {useState}from 'react';\n//import io from 'socket.io-client';\nimport WebcamStream from './WebcamStream.js'\nimport Screenshots from './Screenshots.js'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\n/*\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n  componentDidMount() {\n    navigator.mediaDevices\n\t\t.enumerateDevices()\n\t\t.then( deviceInfos => {\n\t\t\t\tfor (let i = 0; i !== deviceInfos.length; ++i) {\n\t\t\t\t\tconst deviceInfo = deviceInfos[i];\n\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\toption.value = deviceInfo.deviceId;\n\t\t\t\t\tif (deviceInfo.kind === 'videoinput') {\n\t\t\t\t\t\toption.text = deviceInfo.label || 'camera ' +\n\t\t\t\t\t\t\t(this.selectVideoSrc.current.length + 1);\n\t\t\t\t\t\tthis.selectVideoSrc.current.appendChild(option);\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t})\t\t\t\t \n\t\t.then(navigator.mediaDevices\n\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n        window.stream = stream;\n      })\n\t\t);\n  }\n\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasPreviewElement = this.canvasPreview.current;\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n            video,\n            0,\n            0,\n            canvasPreviewElement.width,\n            canvasPreviewElement.height\n          );\n\t\t\t\t\tif(this.props.currentState.almostStreaming){\n\t\t\t\t\t\tcanvasPreview.font = \"200px Arial\"\n\t\t\t\t\t\tcountdown(canvasPreview,this);\n\t\t\t\t\t}\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const { isVideoLoading } = this.state;\n\n    return (\n      <div>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          style={{ display: \"none\" }}\n        />\n\n        {!isVideoLoading && <canvas ref={this.canvasPreview} id=\"canvasPreview\" />}\n\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n\t\t\t\t<div id=\"videoSelectDiv\">\n\t\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\t\tstyle={{width: 300 }}\n\t\t\t\t\t\t\t\t\tid=\"videoSelect\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t/>\n\t\t\t\t\t<Button color='primary' onClick={()=>{\n\t\t\t\t\t\t\t\t\t\tconsole.log(this.props);\n\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"videoSelectDiv\").remove();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tthis.props.handler(\"OnConnection\");\n\t\t\t\t\t}}>Ok</Button>\n\t\t\t\t</div>\n\n      </div>\n    );\n  }\n}\nfunction countdown(canvas,el){\n\tlet context = canvas;\t\n\tlet countdown = el.props.countdownFrom- Math.trunc((-el.props.currentState.timeStartPressed + Date.now())/1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n  if(countdown >= 10){\n    context.fillText(countdown.toString(10),200,315);\n  }else if(countdown >= 1){\n    context.fillText(countdown.toString(10),270,308,100);\n  }\n\n  context.fill();\n  if (countdown <  1){\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n\t\tel.props.handler(\"Streaming\");\n  }\n\t\n}\n\n*/\n\n\nvar Carousel = require('react-responsive-carousel').Carousel;\nconst ModalDiagnosis= (props) => {\n  const {\n    className\n  } = props;\n\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n  \tsetModal(!modal);\n\t\tprops.handlerSuper();\n\t}\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className} size={'xl'}>\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n        <ModalBody>\n\t\t\t\t\t<Spinner color=\"info\" style={{ position: 'absolute',margin: 'auto' }} size={'xl'}/>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n}\n\n/*\nconst ModalScreenshots = (props) => {\n  const {\n    className,\n    data,\t\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal); \n\t\tprops.handler();\n  }\n  console.log(\"as\");\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className} size={'xl'}>\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n        <ModalBody>\n        <Carousel showArrows={true} selectedItem={0} >\n          {data.map((slide) =>\n            <div key={0}>\n              <img className=\"slick-slide-image\" src={slide.src} alt='Error' />\n            </div>\n          )}\n        </Carousel>\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\nclass Screenshots extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      lastScreenshotID: 0,\n      modalOn: false,\n      slidesData: []\n    };\n  }\n\n\tcaptureScreenshot = async () => {\n  \tvar canvas = document.querySelector(\"#canvasPreview\");\n\t\tvar imgAsDataURL = canvas.toDataURL(\"image/jpeg\",1);\n    \n    let newSlidesData = [{src: imgAsDataURL}];\n\t\tthis.setState({slidesData: this.state.slidesData.concat(newSlidesData)});\n\t\tawait this.setState({lastScreenshotID: this.state.lastScreenshotID+1});\n\t\t\n\t  let thumbs = document.getElementsByClassName(\"thumb\");\n\t\tthumbs[thumbs.length-1].onclick = async() => {\n\t\t\tif(this.props.currentState.showModalScreenshots){\n        this.setState({modalOn: true});\n\t\t\t}\n\t\t};\t\n\n    let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\t\ttry{\n\t\t\tbtnsCarousel[2].style.backgroundColor= 'black';\n\t\t\tbtnsCarousel[3].style.backgroundColor= 'black';\n\t\t}\n\t\tcatch{\n\t\t\n\t\t}\n\t\tdocument.querySelector(\".carousel-slider\").style.display = 'none';\n\n}\n\trender(){\n    return(\n\t\t\t<div>\n\t\t\t\t{this.state.modalOn && <ModalScreenshots handler={()=>{this.setState({modalOn:false})}} data={this.state.slidesData}/>}\n        <Carousel showArrows={true} selectedItem={this.state.lastScreenshotID} >\n          {this.state.slidesData.map((slide) =>\n            <div key={this.state.lastScreenshotID}>\n              <img className=\"slick-slide-image\" src={slide.src} alt='' />\n            </div>\n          )}\n        </Carousel>\n\t\t\t</div>\n    );\n\t}\n\n}\n*/\nfunction startStopFunction(btn){\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Start\") === 0){\n\t\tbtn.props.handler(\"Countdown\");\n    startFunction(btn);\n    return;\n  }\n\tbtn.props.handler(\"StopStream\");\n  //stopFunction();\n}\nfunction startFunction(btn){\n\t\n\tbtn.props.currentState.almostStreaming = true;\n  //btn.props.timeStartPressed = Date.now();\n\n}\nclass Diagnosis extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t}\n\t\t\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{this.props.currentState.showModalDiagnosis && <ModalDiagnosis handlerSuper={()=>{this.props.handler(\"closeDiagnosis\")}}/>}\n\t\t\t</div>\n\t\t);\n\t}\n}\nclass ComponentsMain extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t}\n\t}\n  \n\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t{this.props.currentState.showStartBtn && <Button color=\"primary\" onClick={() => startStopFunction(this)}>{this.props.currentState.textMainBtn}</Button>}\n\t\t\t{this.props.currentState.showCaptureBtn && <Button color=\"primary\" disabled={this.props.currentState.disableBtnCapture}  onClick={() => this.props.captureScreenshot()}>{\"Capture Screenshot\"}</Button>}\n\t\t\t{this.props.currentState.showProgressBar && <Progress/>}\n\t\t\t</div>\n\t\t);\n\t}\n}\nfunction manageStates(state){\n  var flags = {};\n  switch(state){\n  \tcase 'OnConnection':\n    \tflags={\n\t\t\t\ttextMainBtn: \"Start\",\n\t\t\t\tshowStartBtn: true,\n\t\t\t\tshowCaptureBtn: true,\n\t\t\t\tshowVideoSelect: false,\n\t\t\t\tshowProgressBar: false,\n\t\t\t\tshowModalScreenshots: true, //if requested\n\t\t\t\tshowModalDiagnosis: false,\n\t\t\t\tdisableBtnCapture: false,\n\n\t\t\t\tstreaming: false,\n\t\t\t\talmostStreaming: false,          \n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'Countdown':\n\t\t\tflags={\n\t\t\t\ttextMainBtn: \"Stop\",\n\t\t\t\tshowStartBtn: true,\n\t\t\t\tshowCaptureBtn: true,\n\t\t\t\tshowVideoSelect: false,\n\t\t\t\tshowProgressBar: true,\n\t\t\t\tshowModalScreenshots: false, //if requested\n\t\t\t\tshowModalDiagnosis: false,\n\t\t\t\tdisableBtnCapture: true,\n\n\t\t\t\tstreaming: false,\n\t\t\t\talmostStreaming: true,          \n\t\t\t\t\n\t\t\t\ttimeStartPressed: Date.now()\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\tcase 'Streaming':\n\t\t\tflags={\n\t\t\t\ttextMainBtn: \"Stop\",\n\t\t\t\tshowStartBtn: true,\n\t\t\t\tshowCaptureBtn: true,\n\t\t\t\tshowVideoSelect: false,\n\t\t\t\tshowProgressBar: true,\n\t\t\t\tshowModalScreenshots: false, //if requested\n\t\t\t\tshowModalDiagnosis: false,\n\t\t\t\tdisableBtnCapture: false,\n\n\t\t\t\tstreaming: true,\n\t\t\t\talmostStreaming: false,          \n\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'StopStream':\n\t\t\tflags={\n\t\t\t\ttextMainBtn: \"Start\",\n\t\t\t\tshowStartBtn: true,\n\t\t\t\tshowCaptureBtn: true,\n\t\t\t\tshowVideoSelect: false,\n\t\t\t\tshowProgressBar: true,\n\t\t\t\tshowModalScreenshots: false, //if requested\n\t\t\t\tshowModalDiagnosis: false,\n\t\t\t\tdisableBtnCapture: true,\n\n\t\t\t\tstreaming: false,\n\t\t\t\talmostStreaming: true,          \n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'closeDiagnosis':\n\t\t\tflags={\n\t\t\t\tshowModalDiagnosis: false\n\t\t\t};\t\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('State not defined');\n\n\t}\n  return flags;\n}\nclass InferenceUI extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n      \t\tcurrent: \"SelectingSource\",\n\n\t\t\t\t\ttextMainBtn: \"Start\",\n\t\t\t\t\tshowStartBtn: false,\n\t\t\t\t\tshowCaptureBtn: false,\n\t\t\t\t\tshowVideoSelect: false,\n\t\t\t\t\tshowProgressBar: false,\n\t\t\t\t\tshowModalScreenshots: false, //if requested\n\t\t\t\t\tshowModalDiagnosis: false,\n\t\t\t\t\tdisableBtnCapture: false,\n\n          streaming: false,\n          almostStreaming: false,          \n\n\t\t\t\t\ttimeStartPressed: 0,\n\n\t\t\t\t\ttriggerCaptureScreenshot: false\n        }\n\t\t\tthis.child = React.createRef();\n\t\t\tthis.countdownFrom = 1;\n    }\n\n\t\tasync handler(nextState){\n\t\t\tawait this.setState({current: nextState});\n\t\t  console.log(\"estado en switch: \" + this.state.current);\n      await this.setState(manageStates(this.state.current));\n\t\t}\n\n\t\tcaptureScreenshot(){\n\t\t\tthis.child.current.captureScreenshot();\n\t\t}\n    render() {\n      return (\n\t\t\t\t\t<Container id=\"container\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<WebcamStream id=\"WebcamStream\" currentState={this.state} handler={(nextState)=>this.handler(nextState)} countdownFrom={this.countdownFrom}/>\n\t\t\t\t\t\t<ComponentsMain currentState={this.state} handler={(nextState)=>this.handler(nextState)} captureScreenshot={()=>this.captureScreenshot()}/> \n\t\t\t\t\t\t<Screenshots currentState={this.state} handler={(nextState)=>this.handler(nextState)} ref={this.child} />\n\t\t\t\t\t\t<Diagnosis currentState={this.state} handler={(nextState)=>this.handler(nextState)}/>\n\t\t\t\t  </Container>\n\t\n        );\n        \n    }\n}\n\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}