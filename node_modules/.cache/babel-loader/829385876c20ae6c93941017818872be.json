{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container } from 'reactstrap';\n/* Container, Col, Row,\n Form, FormGroup, Label, Input,\n Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\n\nimport React, { useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\n/*\nvar Video = props => {\n\tvar videoRef = useRef(null)\n\tuseEffect(() => {\n\t\tvar video = videoRef.current;\n\t\tasync function getStream(){\n\t\t\t const mediaStream = await navigator.mediaDevices.getUserMedia({video: true});\n\t\t}\n\n\t\tgetStream();\n\t\tconst render = () => {\n\t\t\tvideo.srcObject=mediaStream;\n\t\t\t\n\t\t}\n\t\trender()\n\t},[])\n\n\treturn <video ref={videoRef}{...props}/>\n\n}\n*/\n\nclass VideoChat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      source: \"\"\n    };\n\n    this.handleVideo = stream => {\n      this.setState({\n        source: URL.createObjectURL(stream)\n      });\n    };\n\n    this.videoError = err => {\n      alert(err.name);\n    };\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(this.handleVideo).catch(this.videoError);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"video\", {\n      id: \"video-chat\",\n      src: this.state.source,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nconst Canvas = props => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 640;\n    canvas.height = 480;\n    context.width = 640;\n    context.height = 480;\n    context.fillStyle = '#000000';\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n  }, []);\n\n  const render = () => {};\n\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 10\n    }\n  }));\n};\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Canvas, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(VideoChat, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","React","useRef","useEffect","io","VideoChat","Component","state","source","handleVideo","stream","setState","URL","createObjectURL","videoError","err","alert","name","componentDidMount","navigator","mediaDevices","getUserMedia","video","then","catch","render","Canvas","props","canvasRef","canvas","current","context","getContext","width","height","fillStyle","fillRect","InferenceUI","constructor"],"mappings":";AAAA,OAAO,mBAAP;AACA,SAAQA,SAAR,QACW,YADX;AAEG;;;;AAGH,OAAOC,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEtCC,KAFsC,GAE9B;AACNC,MAAAA,MAAM,EAAE;AADF,KAF8B;;AAAA,SAYtCC,WAZsC,GAYvBC,MAAD,IAAY;AACxB,WAAKC,QAAL,CAAc;AACZH,QAAAA,MAAM,EAAEI,GAAG,CAACC,eAAJ,CAAoBH,MAApB;AADI,OAAd;AAGD,KAhBqC;;AAAA,SAkBtCI,UAlBsC,GAkBxBC,GAAD,IAAS;AACpBC,MAAAA,KAAK,CAACD,GAAG,CAACE,IAAL,CAAL;AACD,KApBqC;AAAA;;AAMtCC,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAACC,MAAAA,KAAK,EAAE;AAAR,KAApC,EACGC,IADH,CACQ,KAAKd,WADb,EAEGe,KAFH,CAES,KAAKV,UAFd;AAGD;;AAcDW,EAAAA,MAAM,GAAG;AACP,wBACE;AAAO,MAAA,EAAE,EAAC,YAAV;AAAuB,MAAA,GAAG,EAAE,KAAKlB,KAAL,CAAWC,MAAvC;AAA+C,MAAA,QAAQ,EAAE,IAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAID;;AA7BqC;;AAiCxC,MAAMkB,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAMC,SAAS,GAAG1B,MAAM,CAAC,IAAD,CAAxB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AAEFH,IAAAA,MAAM,CAACI,KAAP,GAAe,GAAf;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAe,GAAf;AACAH,IAAAA,OAAO,CAACE,KAAR,GAAe,GAAf;AACAF,IAAAA,OAAO,CAACG,MAAR,GAAgB,GAAhB;AAEEH,IAAAA,OAAO,CAACI,SAAR,GAAoB,SAApB;AACAJ,IAAAA,OAAO,CAACK,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBL,OAAO,CAACF,MAAR,CAAeI,KAAtC,EAA6CF,OAAO,CAACF,MAAR,CAAeK,MAA5D;AACD,GAXQ,EAWN,EAXM,CAAT;;AAaD,QAAMT,MAAM,GAAG,MAAM,CAEpB,CAFD;;AAIC,sBAAO;AAAQ,IAAA,GAAG,EAAEG;AAAb,KAA4BD,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CApBD;;AAsBA,MAAMU,WAAN,SAA0BpC,KAAK,CAACK,SAAhC,CAA0C;AACtCgC,EAAAA,WAAW,CAACX,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKpB,KAAL,GAAa,EAAb;AAGH;;AAEDkB,EAAAA,MAAM,GAAG;AACL,wBACH,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAEC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADG;AAOH;;AAhBqC;;AAkB1C,eAAeY,WAAf","sourcesContent":["import './InferenceUI.css';\nimport {Container\n    } from 'reactstrap';\n   /* Container, Col, Row,\n    Form, FormGroup, Label, Input,\n    Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\nimport React, {useRef, useEffect} from 'react';\nimport io from 'socket.io-client';\n/*\nvar Video = props => {\n\tvar videoRef = useRef(null)\n\tuseEffect(() => {\n\t\tvar video = videoRef.current;\n\t\tasync function getStream(){\n\t\t\t const mediaStream = await navigator.mediaDevices.getUserMedia({video: true});\n\t\t}\n\n\t\tgetStream();\n\t\tconst render = () => {\n\t\t\tvideo.srcObject=mediaStream;\n\t\t\t\n\t\t}\n\t\trender()\n\t},[])\n\n\treturn <video ref={videoRef}{...props}/>\n\n}\n*/\nclass VideoChat extends React.Component {\n\n  state = {\n    source: \"\"\n  }\n\n  componentDidMount(){\n    navigator.mediaDevices.getUserMedia({video: true})\n      .then(this.handleVideo)\n      .catch(this.videoError)\n  }\n\n  handleVideo = (stream) => {\n    this.setState({\n      source: URL.createObjectURL(stream)\n    })\n  }\n\n  videoError = (err) => {\n    alert(err.name)\n  }\n\n\n\n  render() {\n    return (\n      <video id=\"video-chat\" src={this.state.source} autoPlay={true}>\n      </video>\n    )\n  }\n}\n\n\nconst Canvas = props => {\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n\t\tcanvas.width = 640;\n\t\tcanvas.height= 480;\n\t\tcontext.width= 640;\n\t\tcontext.height= 480;\n\n    context.fillStyle = '#000000'\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n  }, [])\n\n\tconst render = () => {\n\t\t\n\t}\n\n  return <canvas ref={canvasRef} {...props}/>\n}\n\nclass InferenceUI extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n\t\n    render() {\n        return (\n\t\t\t\t\t<Container id=\"container\">\n\t\t\t\t\t\t<Canvas/>\n\t\t\t\t\t\t<VideoChat/>\n\t\t\t\t\t</Container>\n        );\n        \n    }\n}\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}