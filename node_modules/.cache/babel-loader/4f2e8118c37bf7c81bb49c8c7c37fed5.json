{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Container } from 'reactstrap';\nimport React, { useState } from 'react'; //import './InferenceUI.css'\n\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\n\nimport { Carousel } from 'react-responsive-carousel';\n\nclass Screenshots extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.captureScreenshot = async () => {\n      var canvas = document.querySelector(\"#canvasPreview\");\n      var imgAsDataURL = canvas.toDataURL(\"image/jpeg\", 1);\n      let newSlidesData = [{\n        src: imgAsDataURL,\n        id: this.state.lastScreenshotID\n      }];\n      this.setState({\n        slidesData: this.state.slidesData.concat(newSlidesData)\n      });\n      await this.setState({\n        lastScreenshotID: this.state.lastScreenshotID + 1\n      });\n      let thumbs = document.getElementsByClassName(\"thumb\");\n\n      thumbs[thumbs.length - 1].onclick = async a => {\n        if (this.props.currentState.enabledModalScreenshots) {\n          this.selected = a.target.childNodes[0].id;\n          this.setState({\n            modalOn: true\n          });\n        }\n      };\n\n      let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\n      try {\n        btnsCarousel[2].style.backgroundColor = 'black';\n        btnsCarousel[3].style.backgroundColor = 'black';\n      } catch {}\n\n      document.querySelector(\".carousel-slider\").style.display = 'none';\n    };\n\n    this.state = {\n      lastScreenshotID: 0,\n      modalOn: false,\n      slidesData: []\n    };\n    this.selected = 0;\n  }\n\n  getScreenshots() {\n    return this.state.slidesData;\n  }\n\n  download() {\n    console.log(\"ww\");\n    downloadAll(this.state.slidesData, \"jpg\", this.state.slidesData.length);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"640px\",\n        position: \"absolute\",\n        top: \"600px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 4\n      }\n    }, this.state.modalOn && /*#__PURE__*/React.createElement(ModalScreenshots, {\n      handler: () => {\n        this.setState({\n          modalOn: false\n        });\n      },\n      data: this.state.slidesData,\n      selected: this.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Carousel, {\n      showArrows: true,\n      selectedItem: this.state.lastScreenshotID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, this.state.slidesData.map(slide => /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.lastScreenshotID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"slick-slide-image\",\n      src: slide.src,\n      alt: \"\",\n      id: slide.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n}\n\nconst ModalScreenshots = props => {\n  const {\n    className,\n    data,\n    selected\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal);\n    props.handler();\n  };\n\n  let btnsCarousel = document.getElementsByClassName(\"control-arrow\"); //console.log(btnsCarousel);\n\n  try {\n    btnsCarousel[6].style.backgroundColor = 'green';\n    btnsCarousel[6].style.zIndex = 5;\n  } catch (e) {//console.log(e);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    size: 'xl',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Modal title\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Carousel, {\n    showArrows: true,\n    selectedItem: selected,\n    id: \"modalScreenshot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, data.map(slide => /*#__PURE__*/React.createElement(\"div\", {\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"slick-slide-image\",\n    src: slide.src,\n    alt: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })));\n};\n/* Download an img */\n\n\nfunction download(img) {\n  console.log(img);\n  var link = document.createElement(\"a\");\n  link.href = img.src;\n  link.download = true;\n  link.style.display = \"none\";\n  var evt = new MouseEvent(\"click\", {\n    \"view\": window,\n    \"bubbles\": true,\n    \"cancelable\": true\n  });\n  document.body.appendChild(link);\n  link.dispatchEvent(evt);\n  document.body.removeChild(link);\n  console.log(\"Downloading...\");\n}\n\nfunction downloadAll(imgs, ext, limit) {\n  console.log(imgs[0]);\n  /* If specified, filter images by extension */\n\n  if (ext) {\n    ext = \".\" + ext;\n    imgs = [].slice.call(imgs).filter(function (img) {\n      var src = img.src;\n      return src && src.indexOf(ext, src.length - ext.length) !== -1;\n    });\n  }\n  /* Determine the number of images to download \n  limit = (limit && (0 <= limit) && (limit <= imgs.length))\n          ? limit : imgs.length;\n  */\n\n  /* (Try to) download the images */\n\n\n  for (var i = 0; i < limit; i++) {\n    var img = imgs[i];\n    console.log(\"IMG: \" + img.src + \" (\", img, \")\");\n    download(img);\n  }\n}\n\nexport default Screenshots;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js"],"names":["Modal","ModalHeader","ModalBody","ModalFooter","Container","React","useState","Carousel","Screenshots","Component","constructor","props","captureScreenshot","canvas","document","querySelector","imgAsDataURL","toDataURL","newSlidesData","src","id","state","lastScreenshotID","setState","slidesData","concat","thumbs","getElementsByClassName","length","onclick","a","currentState","enabledModalScreenshots","selected","target","childNodes","modalOn","btnsCarousel","style","backgroundColor","display","getScreenshots","download","console","log","downloadAll","render","width","position","top","map","slide","ModalScreenshots","className","data","modal","setModal","toggle","handler","zIndex","e","img","link","createElement","href","evt","MouseEvent","window","body","appendChild","dispatchEvent","removeChild","imgs","ext","limit","slice","call","filter","indexOf","i"],"mappings":"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","sourcesContent":["import {Modal, ModalHeader, ModalBody, ModalFooter, Container\n    } from 'reactstrap';\nimport React, {useState}from 'react';\n//import './InferenceUI.css'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nclass Screenshots extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      lastScreenshotID: 0,\n      modalOn: false,\n      slidesData: []\n\n    };\n    this.selected = 0;\n  }\n\n\tcaptureScreenshot = async () => {\n  \tvar canvas = document.querySelector(\"#canvasPreview\");\n\t\tvar imgAsDataURL = canvas.toDataURL(\"image/jpeg\",1);\n    \n    let newSlidesData = [{src: imgAsDataURL, id: this.state.lastScreenshotID}];\n\t\tthis.setState({slidesData: this.state.slidesData.concat(newSlidesData)});\n\t\tawait this.setState({lastScreenshotID: this.state.lastScreenshotID+1});\n\t\t\n\t  let thumbs = document.getElementsByClassName(\"thumb\");\n\t\tthumbs[thumbs.length-1].onclick = async(a) => {\n\t\t\tif(this.props.currentState.enabledModalScreenshots){\n        this.selected = a.target.childNodes[0].id;\n        this.setState({modalOn: true});\n\n\t\t\t}\n\t\t};\t\n\n    let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\t\ttry{\n\t\t\tbtnsCarousel[2].style.backgroundColor= 'black';\n\t\t\tbtnsCarousel[3].style.backgroundColor= 'black';\n\t\t}\n\t\tcatch{\n\t\t}\n\t\tdocument.querySelector(\".carousel-slider\").style.display = 'none';\n\n}\n  getScreenshots(){\n    return this.state.slidesData;\n  }\n\tdownload(){\n\t\tconsole.log(\"ww\");\n\t\tdownloadAll(this.state.slidesData,\"jpg\",this.state.slidesData.length);\n\t}\n\trender(){\n    return(\n\t\t\t<div style={{width: \"640px\", position: \"absolute\", top: \"600px\"}}>\n\t\t\t\t{this.state.modalOn && \n          <ModalScreenshots handler={()=>{this.setState({modalOn:false})}} \n                            data={this.state.slidesData} \n                            selected={this.selected}/>}\n        <Carousel showArrows={true} \n                  selectedItem={this.state.lastScreenshotID} >\n        {this.state.slidesData.map((slide) =>\n          <div key={this.state.lastScreenshotID}>\n            <img className=\"slick-slide-image\" src={slide.src} alt='' id={slide.id}/>\n          </div>)}\n        </Carousel>\n\t\t\t</div>\n    );\n\t}\n\n}\n\nconst ModalScreenshots = (props) => {\n  const {\n    className,\n    data,\n    selected,\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal); \n\t\tprops.handler();\n  }\n  let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n  //console.log(btnsCarousel);\n  \n  try{\n  btnsCarousel[6].style.backgroundColor = 'green';\n  btnsCarousel[6].style.zIndex= 5;\n  \n\t}\n\tcatch(e){\n    //console.log(e);\n\t}\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className} size={'xl'}>\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n        <ModalBody>\n        <Carousel showArrows={true} selectedItem={selected} id=\"modalScreenshot\" >\n          {data.map((slide) =>\n            <div key={0}>\n              <img className=\"slick-slide-image\" src={slide.src} alt='Error' />\n            </div>\n          )}\n        </Carousel>\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n\n/* Download an img */\nfunction download(img) {\n\t\tconsole.log(img);\n    var link = document.createElement(\"a\");\n    link.href = img.src;\n    link.download = true;\n    link.style.display = \"none\";\n    var evt = new MouseEvent(\"click\", {\n        \"view\": window,\n        \"bubbles\": true,\n        \"cancelable\": true\n    });\n\n    document.body.appendChild(link);\n    link.dispatchEvent(evt);\n    document.body.removeChild(link);\n    console.log(\"Downloading...\");\n}\n\nfunction downloadAll(imgs, ext, limit) {\n\t\tconsole.log(imgs[0]);\n    /* If specified, filter images by extension */\n    if (ext) {\n        ext = \".\" + ext;\n        imgs = [].slice.call(imgs).filter(function(img) {\n            var src = img.src;\n            return (src && (src.indexOf(ext, src.length - ext.length) !== -1));\n        });\n    }\n\n    /* Determine the number of images to download \n    limit = (limit && (0 <= limit) && (limit <= imgs.length))\n            ? limit : imgs.length;\n\t\t*/\n    /* (Try to) download the images */\n    for (var i = 0; i < limit; i++) {\n        var img = imgs[i];\n        console.log(\"IMG: \" + img.src + \" (\", img, \")\");\n        download(img);\n    }\n}\nexport default Screenshots;\n"]},"metadata":{},"sourceType":"module"}