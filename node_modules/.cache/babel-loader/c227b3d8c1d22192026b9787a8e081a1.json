{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/ElementsMain.js\";\nimport { Button, Progress, Container, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useState } from 'react'; //import './InferenceUI.css'\n\nclass ElementsMain extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.progressBarColor = \"info\"; //reactStrap notation\n  }\n\n  setProgressBarColor() {\n    let p = parseInt(this.props.currentState.progress, 10);\n\n    if (p < 80) {\n      this.progressBarColor = \"info\";\n    } else if (p < 100) {\n      this.progressBarColor = \"success\";\n    } else {\n      this.progressBarColor = \"danger\";\n    }\n\n    return this.progressBarColor;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, this.props.currentState.showStartBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => startStopFunction(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, this.props.currentState.textMainBtn), this.props.currentState.showCaptureBtn && /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      disabled: this.props.currentState.disableBtnCapture,\n      onClick: () => this.props.captureScreenshot(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, \"Capture Screenshot\"), this.props.currentState.showProgressBar && /*#__PURE__*/React.createElement(Progress, {\n      value: this.props.currentState.progress,\n      color: this.setProgressBarColor(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"From Server\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: () => this.props.fromServer(\"blur\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 6\n      }\n    }, \"Blur\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      id: \"range\",\n      onChange: e => {\n        this.props.fromServer(\"progress\", e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nfunction startStopFunction(btn) {\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Start\") === 0) {\n    startFunction(btn);\n    return;\n  }\n\n  stopFunction(btn);\n}\n\nfunction startFunction(btn) {\n  btn.props.handler(\"Countdown\");\n  btn.props.currentState.almostStreaming = true;\n}\n\nfunction stopFunction(btn) {\n  btn.props.handler(\"StopStream\");\n}\n\nconst ModalExample = props => {\n  const {\n    buttonLabel,\n    className\n  } = props;\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"danger\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, buttonLabel), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Cancelar\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Se ha cortado prque no se detecta la membrana\"), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Ok\"), ' ')));\n};\n\nexport default ElementsMain;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/ElementsMain.js"],"names":["Button","Progress","Container","Modal","ModalHeader","ModalBody","ModalFooter","React","useState","ElementsMain","Component","constructor","props","state","progressBarColor","setProgressBarColor","p","parseInt","currentState","progress","render","showStartBtn","startStopFunction","textMainBtn","showCaptureBtn","disableBtnCapture","captureScreenshot","showProgressBar","fromServer","e","target","value","btn","localeCompare","startFunction","stopFunction","handler","almostStreaming","ModalExample","buttonLabel","className","modal","setModal","toggle"],"mappings":"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","sourcesContent":["import { Button, Progress, Container, Modal, ModalHeader, ModalBody, ModalFooter \n} from 'reactstrap';\nimport React, {useState} from 'react';\n//import './InferenceUI.css'\n\nclass ElementsMain extends React.Component{\n  constructor(props){\n      super(props);\n      this.state = {\n      }\n      this.progressBarColor = \"info\"; //reactStrap notation\n  }\n\n  setProgressBarColor(){\n    let p =parseInt(this.props.currentState.progress,10);\n    if (p < 80){\n      this.progressBarColor = \"info\";\n    }\n    else if (p < 100){\n      this.progressBarColor = \"success\";\n    }\n    else{\n      this.progressBarColor = \"danger\";\n    }\n    return this.progressBarColor;\n  }\n \n  render(){\n    return(\n      <Container> \n        {this.props.currentState.showStartBtn && \n          <Button color=\"primary\" \n                  onClick={() => startStopFunction(this)}>\n            {this.props.currentState.textMainBtn}</Button>}\n        {this.props.currentState.showCaptureBtn && \n          <Button color=\"primary\" \n                  disabled={this.props.currentState.disableBtnCapture}  \n                  onClick={() => this.props.captureScreenshot()}>\n            {\"Capture Screenshot\"}</Button>}\n        {this.props.currentState.showProgressBar && \n          <Progress value={this.props.currentState.progress} \n                    color={this.setProgressBarColor()}/>}\n\n        \n        <h4>From Server</h4>\n\t\t\t  <Button color= \"secondary\" onClick={()=>this.props.fromServer(\"blur\")}>{\"Blur\"}</Button>\n        <input type=\"range\" min=\"0\" max=\"100\" id=\"range\" onChange={(e)=>\n                {this.props.fromServer(\"progress\",e.target.value);}}/>\n      </Container>\n    );\n  }\n}\nfunction startStopFunction(btn){\n  if (btn.props.currentState.textMainBtn.localeCompare(\"Start\") === 0){\n    startFunction(btn);\n    return;\n  }\n  stopFunction(btn);\n}\n\nfunction startFunction(btn){\n  btn.props.handler(\"Countdown\");\n  btn.props.currentState.almostStreaming = true;\n  \n  }\n\nfunction stopFunction(btn){\n   btn.props.handler(\"StopStream\");\n\n}\n\nconst ModalExample = (props) => {\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    <div>\n      <Button color=\"danger\" onClick={toggle}>{buttonLabel}</Button>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Cancelar</ModalHeader>\n        <ModalBody>\n\t\t\t\t\tSe ha cortado prque no se detecta la membrana\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={toggle}>Ok</Button>{' '}\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\nexport default ElementsMain;\n"]},"metadata":{},"sourceType":"module"}