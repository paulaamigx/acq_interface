{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js\";\nimport './WebcamStream.css';\nimport React from 'react'; //import {Alert} from 'reactstrap';\n\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport JSZipUtils from 'jszip-utils';\nimport JSZip from 'jszip'; //import FileSaver from 'file-saver';\n\nimport { handleDataAvailable, ctrlBtnFunction, countdown, downloadScreenshots, downloadVideo, downloadAll, captureScreenshot, mirror, fullScreen, organizeScreen } from './functions.js';\nconst framesPerZip = 3;\nconst packetsSentLimit = 3; // Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {};\n    this.videoTag = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.timeStartPressed = null;\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.videoRecorded = null;\n    this.mirrorScale = [1, 1];\n    this.mirrorTranslate = [0, 0];\n    this.canvasHeight = 0;\n    this.canvasWidth = 0; //Dummy mientras usamos setTimeout para pasar de gecon a exam\n\n    this.timeout = null;\n    this.timeout2 = null;\n    this.videoSrc = null;\n    this.changeFullScreenFrom = false;\n    this.framesArray = [];\n    this.socketCnt = 0;\n    this.zip = null;\n    this.packetsSent = 0;\n  }\n\n  setStream() {\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\");\n\n    if (this.videoSrc) {\n      try {\n        selectVideoSrc.value = this.videoSrc;\n      } catch (e) {\n        console.log(e);\n      }\n    } // Falta cerrar el stream anterior antes de abrir uno nuevo.\n\n\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc ? {\n          exact: selectVideoSrc.value\n        } : undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    let countdownCurrent;\n    let countdownNext;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.props.setIsVideoLoading(false);\n        var canvasPreviewElement = this.props.canvasPreview.current;\n\n        if (canvasPreviewElement) {\n          var canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.translate(this.mirrorTranslate[0], this.mirrorTranslate[1]);\n          canvasPreview.scale(this.mirrorScale[0], this.mirrorScale[1]);\n\n          if (this.props.currentState.stateName.localeCompare(\"Countdown\") === 0) {\n            canvasPreview.filter = \"brightness(50%)\";\n          }\n\n          canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n          if (this.props.currentState.stateName.localeCompare(\"Countdown\") === 0) {\n            countdown(canvasPreviewElement, this, countdownCurrent, countdownNext);\n          } //Send each frame to server\n          else if (this.props.currentState.stateName.localeCompare(\"Examination\") === 0) {\n              let frame = canvasPreviewElement.toDataURL(\"image/jpeg\", 0.5);\n\n              if (this.socketCnt < framesPerZip && this.socketCnt > 0) {\n                let name = 'f' + this.socketCnt + '.jpeg';\n                this.zip.file(name, urlToPromise(frame), {\n                  binary: true\n                });\n              } else if (this.socketCnt === framesPerZip) {\n                let el = this;\n                console.log('aca');\n                this.zip.generateAsync({\n                  type: \"blob\"\n                }).then(function (content) {\n                  console.log('zipfile');\n                  var zipFile = new File([content], \"test.zip\");\n                  sendto(zipFile, el);\n                });\n                this.packetsSent++;\n                if (this.packetsSent < packetsSentLimit) this.socketCnt = 0;\n              }\n\n              if (this.socketCnt === 0) {\n                this.zip = new JSZip();\n                this.zip.file('f0.jpeg', urlToPromise(frame), {\n                  binary: true\n                });\n              }\n\n              this.socketCnt++;\n            }\n\n          requestAnimationFrame(this.tick);\n        }\n      }\n    }, 50);\n  }\n\n  startRecording() {\n    var options = {\n      mimeType: \"video/webm;codecs=vp8\"\n    };\n    this.mediaRecorder = new MediaRecorder(this.props.canvasPreview.current.captureStream(), options);\n    this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n    this.mediaRecorder.start();\n  }\n\n  stopRecording() {\n    this.mediaRecorder.stop();\n  }\n\n  downloadVideo() {\n    downloadVideo(this);\n  }\n\n  downloadAll() {\n    downloadAll(this);\n  }\n\n  captureScreenshot() {\n    captureScreenshot(this);\n  }\n\n  downloadScreenshots() {\n    downloadScreenshots(this);\n  }\n\n  mirror(way) {\n    mirror(this, way);\n  }\n\n  fullScreen() {\n    fullScreen(this);\n  }\n\n  organizeScreen() {\n    organizeScreen(this);\n  }\n\n  resetSocketVars() {\n    this.socketCnt = 0; //this.framesArray = [];\n  }\n\n  render() {\n    const isVideoLoading = this.props.currentState.isVideoLoading;\n    const colorScreenshotBtn = this.props.currentState.enableCaptureBtn ? \"white\" : \"grey\";\n\n    if (!isVideoLoading && !this.props.currentState.hideSidePanel && !this.props.currentState.fullScreen) {\n      let btns = document.getElementById(\"buttons\");\n\n      if (btns) {\n        btns.style.top = 50 * 3 / 4 + \"vw\";\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"WebcamStream_Wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"script\", {\n      src: \"adapter.js\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      autoPlay: true,\n      id: \"video\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvasDiv\",\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }\n    }, this.props.currentState.canvasAlert && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w_divAlert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }\n    }, \"Verifique\"), this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w_divAlert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, \"Estableciendo conexi\\xF3n con el servidor.\"), this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.props.canvasPreview,\n      id: \"canvasPreview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }), !this.props.currentState.hideSidePanel && !this.props.currentState.fullScreen && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"div_hideSP\",\n      onClick: () => this.props.hideSidePanel(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 19\n      }\n    }, '>')), this.props.currentState.stateName.localeCompare(\"Countdown\") === 0 && /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvasCountdown\",\n      width: \"1000\",\n      height: \"750\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }\n    }), this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"screenshotBtn\",\n      onClick: () => {\n        if (this.props.currentState.enableCaptureBtn) {\n          this.captureScreenshot();\n        }\n      },\n      style: {\n        color: colorScreenshotBtn\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-camera\",\n      style: {\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 25\n      }\n    })), this.props.currentState.enableCtrlBtn && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ctrlBtn\",\n      onClick: () => {\n        ctrlBtnFunction(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 19\n      }\n    }, this.props.currentState.textCtrlBtn), !this.props.currentState.enableCtrlBtn && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ctrlBtnDisabled\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 19\n      }\n    }, this.props.currentState.textCtrlBtn), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"fullScreenBtn\",\n      onClick: () => fullScreen(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, !this.props.currentState.fullScreen && /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-expand\",\n      style: {\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 27\n      }\n    }), this.props.currentState.fullScreen && /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-compress\",\n      style: {\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 27\n      }\n    })))), isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvasMessage\",\n      className: \"canvasRendered\",\n      width: \"1000\",\n      height: \"750\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    })), !this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      id: \"recordedVideoElement\",\n      controls: true,\n      src: null,\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ctrlStartOver\",\n      onClick: () => {\n        ctrlBtnFunction(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 13\n      }\n    }, this.props.currentState.textCtrlBtn)));\n  }\n\n}\n\nfunction urlToPromise(url) {\n  return new Promise(function (resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nfunction sendto(content, el) {\n  el.props.sendViaSocket(content); //\tFileSaver.saveAs(content, \"download.zip\");\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js"],"names":["React","JSZipUtils","JSZip","handleDataAvailable","ctrlBtnFunction","countdown","downloadScreenshots","downloadVideo","downloadAll","captureScreenshot","mirror","fullScreen","organizeScreen","framesPerZip","packetsSentLimit","WebcamStream","Component","constructor","props","state","videoTag","createRef","tick","bind","timeStartPressed","mediaRecorder","recordedChunks","videoRecorded","mirrorScale","mirrorTranslate","canvasHeight","canvasWidth","timeout","timeout2","videoSrc","changeFullScreenFrom","framesArray","socketCnt","zip","packetsSent","setStream","selectVideoSrc","document","getElementById","value","e","console","log","navigator","mediaDevices","getUserMedia","video","deviceId","exact","undefined","facingMode","then","stream","current","srcObject","requestAnimationFrame","window","countdownCurrent","countdownNext","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setIsVideoLoading","canvasPreviewElement","canvasPreview","getContext","height","videoHeight","width","videoWidth","translate","scale","currentState","stateName","localeCompare","filter","drawImage","frame","toDataURL","name","file","urlToPromise","binary","el","generateAsync","type","content","zipFile","File","sendto","startRecording","options","mimeType","MediaRecorder","captureStream","ondataavailable","start","stopRecording","stop","way","resetSocketVars","render","isVideoLoading","colorScreenshotBtn","enableCaptureBtn","hideSidePanel","btns","style","top","display","canvasAlert","position","zIndex","renderCanvas","color","margin","enableCtrlBtn","textCtrlBtn","url","Promise","resolve","reject","getBinaryContent","err","data","sendViaSocket"],"mappings":"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","sourcesContent":["import './WebcamStream.css'\nimport React from 'react';\n//import {Alert} from 'reactstrap';\n\nimport \"@fortawesome/fontawesome-free/css/all.css\"\n\nimport JSZipUtils from 'jszip-utils';\nimport JSZip from 'jszip';\n//import FileSaver from 'file-saver';\nimport {handleDataAvailable, ctrlBtnFunction, countdown, \n        downloadScreenshots, downloadVideo, downloadAll, captureScreenshot, mirror,\n        fullScreen, organizeScreen} from './functions.js';\nconst framesPerZip = 3;\nconst packetsSentLimit = 3;\n\n// Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n    };\n\n    this.videoTag = React.createRef();\n    this.tick = this.tick.bind(this);\n\n    this.timeStartPressed = null;\n\n    this.mediaRecorder = null;\n    this.recordedChunks= [];\n\t  this.videoRecorded = null;\n\n    this.mirrorScale = [1,1];\n    this.mirrorTranslate = [0,0];\n\n    this.canvasHeight = 0;\n    this.canvasWidth = 0;\n    \n    //Dummy mientras usamos setTimeout para pasar de gecon a exam\n    this.timeout = null;\n    this.timeout2 = null;\n    this.videoSrc = null;\n    \n    this.changeFullScreenFrom = false;\n\n    this.framesArray = [];\n\t\tthis.socketCnt = 0;\n    this.zip = null;\n    this.packetsSent = 0;\n\n  }\n\n  setStream(){\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\");\n    if(this.videoSrc){\n      try{\n        selectVideoSrc.value = this.videoSrc;\n        }\n      catch(e){console.log(e)}\n    }\n    \n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc? {exact: selectVideoSrc.value}:undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    let countdownCurrent;\n    let countdownNext;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.props.setIsVideoLoading(false);\n        var canvasPreviewElement = this.props.canvasPreview.current;\n        if(canvasPreviewElement){\n          var canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.translate(this.mirrorTranslate[0],this.mirrorTranslate[1]);\n          canvasPreview.scale(this.mirrorScale[0],this.mirrorScale[1]);\n\n          if(this.props.currentState.stateName.localeCompare(\"Countdown\")===0){\n            canvasPreview.filter = \"brightness(50%)\";\n          }\n          canvasPreview.drawImage(\n              video,\n              0,\n              0,\n              canvasPreviewElement.width,\n              canvasPreviewElement.height\n          );\n          if(this.props.currentState.stateName.localeCompare(\"Countdown\")===0){\n            countdown(canvasPreviewElement,this,countdownCurrent, countdownNext);\n          }\n\n          //Send each frame to server\n          else if(this.props.currentState.stateName.localeCompare(\"Examination\") === 0){\n            let frame  = canvasPreviewElement.toDataURL(\"image/jpeg\",0.5);\n            if (this.socketCnt < framesPerZip && this.socketCnt >0){\n                let name = 'f'+this.socketCnt+'.jpeg';\n                this.zip.file(name, urlToPromise(frame),{binary:true});\n            }\n            else if(this.socketCnt === framesPerZip){\n\t\t\t\t\t  \tlet el = this;\n              console.log('aca');\n\t\t\t\t      this.zip.generateAsync({type: \"blob\"}).then(\n                function(content) {\n                  console.log('zipfile');\n                  var zipFile = new File([content], \"test.zip\");\n                  sendto(zipFile,el);\n                });\n              this.packetsSent++;\n              if(this.packetsSent < packetsSentLimit)\n                this.socketCnt = 0;\n            }\n            if(this.socketCnt === 0){\n              this.zip = new JSZip();\n              this.zip.file('f0.jpeg', urlToPromise(frame),{binary:true});\n            }\n            this.socketCnt++;\n          }\n          requestAnimationFrame(this.tick);\n        }\n      }\n    }, 50);\n  }\n  startRecording(){\n      var options = { mimeType: \"video/webm;codecs=vp8\" };\n      this.mediaRecorder = new MediaRecorder(this.props.canvasPreview.current.captureStream(), options);\n      this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n      this.mediaRecorder.start();\n  }\n\n\tstopRecording(){\n    this.mediaRecorder.stop();\n\t}\n\n\tdownloadVideo(){\n\t\tdownloadVideo(this);\t\n\t}\n  downloadAll(){\n    downloadAll(this);\n  }\n  \n  captureScreenshot(){\n    captureScreenshot(this);\n    }\n\n  downloadScreenshots(){\n    downloadScreenshots(this);\n  }\n  \n  mirror(way){\n    mirror(this,way);\n  }\n  fullScreen(){\n    fullScreen(this);\n  }\n  organizeScreen(){\n    organizeScreen(this);\n  }\n  resetSocketVars(){\n    this.socketCnt = 0;\n    //this.framesArray = [];\n  }\n  render() {\n    const isVideoLoading = this.props.currentState.isVideoLoading;\n    const colorScreenshotBtn = (this.props.currentState.enableCaptureBtn)? \"white\" : \"grey\";\n\n    if(!isVideoLoading && !this.props.currentState.hideSidePanel && !this.props.currentState.fullScreen){\n      let btns= document.getElementById(\"buttons\");\n      if(btns){\n        btns.style.top = 50*3/4+\"vw\";}\n\n    }\n    return (\n      <div id=\"WebcamStream_Wrapper\">\n\n        <script src=\"adapter.js\"></script>\n\n        {/* Dummy video tag to recieve UserMedia stream.*/}\n        <video\n          ref={this.videoTag}\n          autoPlay\n          id = \"video\"\n          style={{ display: \"none\"}}\n        />\n\n        {!isVideoLoading &&\n          <div id=\"canvasDiv\" className=\"canvasRendered\">\n            {this.props.currentState.canvasAlert &&\n              <div className=\"w_divAlert\" style={{position: 'absolute', zIndex: 2}}>\n                {//<Alert color=\"warning\">Verifique el enfoque del dispositivo.</Alert>\n                }\n                Verifique\n              </div>\n            }\n\n           {this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 &&\n              <div className=\"w_divAlert\" style={{position: 'absolute', zIndex: 2}}>\n                {//<Alert color=\"info\">Estableciendo conexión con el servidor.</Alert>\n                }\n                Estableciendo conexión con el servidor.\n              </div>\n            }\n            \n            {this.props.currentState.renderCanvas &&\n              <div>\n                <canvas ref={this.props.canvasPreview}\n                        id=\"canvasPreview\"/>\n                {!this.props.currentState.hideSidePanel && !this.props.currentState.fullScreen &&\n                  <div id='div_hideSP' onClick={()=>this.props.hideSidePanel()}>{'>'}</div>\n                }\n              </div>\n\n            }\n            {(this.props.currentState.stateName.localeCompare(\"Countdown\") === 0) &&\n              <canvas id=\"canvasCountdown\" width=\"1000\" height=\"750\"/>\n            }\n            {this.props.currentState.renderCanvas &&\n\t\t\t\t      <div id=\"buttons\">\n                <span  id = \"screenshotBtn\"\n                       onClick={() => {if(this.props.currentState.enableCaptureBtn){this.captureScreenshot()}}}\n                       style={{color: colorScreenshotBtn}}>\n                        <i className=\"fas fa-camera\" style={{margin: \"0px\"}}></i>\n                </span>\n                {this.props.currentState.enableCtrlBtn &&\n                  <div id=\"ctrlBtn\"\n                       onClick={()=>{ctrlBtnFunction(this);}}>\n                       {this.props.currentState.textCtrlBtn}\n                  </div>\n                }\n                {!this.props.currentState.enableCtrlBtn &&\n                  <div id=\"ctrlBtnDisabled\">\n                       {this.props.currentState.textCtrlBtn}\n                  </div>\n                }\n                <span  id = \"fullScreenBtn\" \n                       onClick={()=>fullScreen(this)}>\n                       {!this.props.currentState.fullScreen &&\n                          <i className=\"fas fa-expand\" style={{margin: \"0px\"}}></i>}\n                       {this.props.currentState.fullScreen && \n                          <i className=\"fas fa-compress\" style={{margin: \"0px\"}}></i>}\n                </span>\n              </div>\n            }\n          </div>\n        }\n        \n        {isVideoLoading &&\n          <div>\n            <canvas id=\"canvasMessage\"\n                    className=\"canvasRendered\" width=\"1000\" height=\"750\"/>\n          </div>\n        }\n        {!this.props.currentState.renderCanvas &&\n          <div style={{width: '100%'}}>\n            <video id = \"recordedVideoElement\"\n                   controls\n                   src={null}\n                   className=\"canvasRendered\"/>\n            <div id= \"ctrlStartOver\" \n                    onClick={()=>{ctrlBtnFunction(this);}}\n                    >\n                    {this.props.currentState.textCtrlBtn}\n                    </div>\n          </div>\n        }\n      </div>\n    );\n  }\n}\nfunction urlToPromise(url) {\n    return new Promise(function(resolve, reject) {\n      JSZipUtils.getBinaryContent(url, function (err, data) {\n        if(err) {\n          reject(err);\n        }\n        else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\nfunction sendto(content,el){\n\tel.props.sendViaSocket(content);\n//\tFileSaver.saveAs(content, \"download.zip\");\n}\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}