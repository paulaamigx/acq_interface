{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js\";\nimport './InferenceUI.css';\nimport React from 'react';\nimport { Button, Container, Alert } from 'reactstrap';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.mirrorCount = 0;\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.enumerateDevices().then(deviceInfos => {\n      for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || 'camera ' + (this.selectVideoSrc.current.length + 1);\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      }\n    }).then(navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: \"environment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n    }));\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvasPreview.current;\n        const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n        canvasPreviewElement.height = video.videoHeight;\n        canvasPreviewElement.width = video.videoWidth;\n        canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n        if (this.props.currentState.almostStreaming) {\n          canvasPreview.font = \"200px Arial\";\n          countdown(canvasPreview, this);\n        }\n\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const {\n      isVideoLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      width: \"400\",\n      height: \"400\",\n      autoPlay: true,\n      id: \"video\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"previewDiv\",\n      style: {\n        width: \"640px\",\n        height: \"480px\",\n        display: \"block\",\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AlertOnPreview, {\n      msg: \"wenawena\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      id: \"canvasPreview\",\n      style: {\n        display: \"block\",\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mirror\",\n      className: \"overlay\",\n      onClick: () => {\n        mirror(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"M\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"videoSelectDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      ref: this.selectVideoSrc,\n      style: {\n        width: 300\n      },\n      id: \"videoSelect\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => {\n        console.log(this.props);\n        document.getElementById(\"videoSelectDiv\").remove();\n        this.props.handler(\"OnConnection\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }\n    }, \"Ok\")), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 28\n      }\n    }, \"Please wait while we load the video stream.\"));\n  }\n\n}\n\nfunction AlertOnPreview(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"alert\",\n    style: {\n      backgroundColor: 'green',\n      width: \"100px\",\n      height: \"20px\",\n      position: 'absolute',\n      zIndex: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, props.msg, /*#__PURE__*/React.createElement(Alert, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, \"wwww\"));\n}\n\nfunction mirror(el) {\n  let canvas = document.querySelector(\"#canvasPreview\");\n\n  if (el.mirrorCount % 2 === 0) {\n    canvas.style.transform = \"translate(640,0)\";\n    canvas.style.transform = \"scale(-1,1)\";\n  } else {\n    canvas.style.transform = \"none\";\n  }\n\n  el.mirrorCount++;\n}\n\nfunction countdown(canvas, el) {\n  let context = canvas;\n  let countdown = el.props.countdownFrom - Math.trunc((-el.props.currentState.timeStartPressed + Date.now()) / 1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n  ;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n\n  if (countdown >= 10) {\n    context.fillText(countdown.toString(10), 200, 315);\n  } else if (countdown >= 1) {\n    context.fillText(countdown.toString(10), 270, 308, 100);\n  }\n\n  context.fill();\n\n  if (countdown < 1) {\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n    el.props.handler(\"Streaming\");\n  }\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js"],"names":["React","Button","Container","Alert","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","selectVideoSrc","tick","bind","mirrorCount","componentDidMount","navigator","mediaDevices","enumerateDevices","then","deviceInfos","i","length","deviceInfo","option","document","createElement","value","deviceId","kind","text","label","current","appendChild","getUserMedia","video","facingMode","stream","srcObject","requestAnimationFrame","window","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","height","videoHeight","width","videoWidth","drawImage","currentState","almostStreaming","font","countdown","render","display","position","mirror","console","log","getElementById","remove","handler","AlertOnPreview","backgroundColor","zIndex","msg","el","canvas","querySelector","style","transform","context","countdownFrom","Math","trunc","timeStartPressed","Date","now","beginPath","arc","PI","fillStyle","fill","fillText","toString","streaming"],"mappings":"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","sourcesContent":["import './InferenceUI.css'\nimport React from 'react';\nimport {Button, Container, Alert} from 'reactstrap';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n\n    this.mirrorCount = 0;\n  }\n  componentDidMount() {\n    navigator.mediaDevices\n\t\t.enumerateDevices()\n\t\t.then( deviceInfos => {\n\t\t\t\tfor (let i = 0; i !== deviceInfos.length; ++i) {\n\t\t\t\t\tconst deviceInfo = deviceInfos[i];\n\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\toption.value = deviceInfo.deviceId;\n\t\t\t\t\tif (deviceInfo.kind === 'videoinput') {\n\t\t\t\t\t\toption.text = deviceInfo.label || 'camera ' +\n\t\t\t\t\t\t\t(this.selectVideoSrc.current.length + 1);\n\t\t\t\t\t\tthis.selectVideoSrc.current.appendChild(option);\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t})\t\t\t\t \n\t\t.then(navigator.mediaDevices\n\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n        window.stream = stream;\n      })\n\t\t);\n  }\n\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasPreviewElement = this.canvasPreview.current;\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n            video,\n            0,\n            0,\n            canvasPreviewElement.width,\n            canvasPreviewElement.height\n          );\n\t\t\t\t\tif(this.props.currentState.almostStreaming){\n\t\t\t\t\t\tcanvasPreview.font = \"200px Arial\"\n\t\t\t\t\t\tcountdown(canvasPreview,this);\n\t\t\t\t\t}\n           requestAnimationFrame(this.tick);\n\n      }\n    }, 50);\n  }\n  render() {\n    const { isVideoLoading } = this.state;\n    return (\n      <Container>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          id = \"video\"\n          style={{ display: \"none\"\n          }}\n        />\n\n        {!isVideoLoading && \n        <div id=\"previewDiv\" style={{width:\"640px\", height: \"480px\", display: \"block\", position: \"relative\"}}>\n          <AlertOnPreview msg=\"wenawena\"/>\n          <canvas ref={this.canvasPreview} id=\"canvasPreview\" style={{display: \"block\", position: \"relative\"}} />\n          <div id=\"mirror\" className=\"overlay\" onClick={()=>{mirror(this)}}>M</div>\n        </div>\n        }\n\t\t\t\t<div id=\"videoSelectDiv\">\n\t\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\t\tstyle={{width: 300 }}\n\t\t\t\t\t\t\t\t\tid=\"videoSelect\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t/>\n\t\t\t\t\t<Button color='primary' onClick={()=>{\n\t\t\t\t\t\t\t\t\t\tconsole.log(this.props);\n\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"videoSelectDiv\").remove();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tthis.props.handler(\"OnConnection\");\n\t\t\t\t\t}}>Ok</Button>\n\t\t\t\t</div>\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n\n      </Container>\n    );\n  }\n}\nfunction AlertOnPreview(props){\n  return(\n    <div id=\"alert\" \n         style={{backgroundColor: 'green', \n                width: \"100px\", \n                height: \"20px\", \n                position: 'absolute', \n                zIndex: 2}}>\n          \n      {props.msg}  \n      <Alert>wwww</Alert>\n    </div>\n  )\n}\nfunction mirror(el){\n  let canvas = document.querySelector(\"#canvasPreview\");\n  if (el.mirrorCount%2 === 0){\n    canvas.style.transform = \"translate(640,0)\";\n    canvas.style.transform = \"scale(-1,1)\";\n  }\n  else{\n    canvas.style.transform = \"none\";\n  }\n  el.mirrorCount ++;\n}\nfunction countdown(canvas,el){\n\tlet context = canvas;\t\n\tlet countdown = el.props.countdownFrom- Math.trunc((-el.props.currentState.timeStartPressed + Date.now())/1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n  if(countdown >= 10){\n    context.fillText(countdown.toString(10),200,315);\n  }else if(countdown >= 1){\n    context.fillText(countdown.toString(10),270,308,100);\n  }\n\n  context.fill();\n  if (countdown <  1){\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n\t\tel.props.handler(\"Streaming\");\n  }\n\t\n}\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}