{"ast":null,"code":"import JSZipUtils from 'jszip-utils';\nexport var handleDataAvailable = function (el) {\n  return function (event) {\n    console.log('handleDataAvailable');\n\n    if (event.data && event.data.size > 0) {\n      el.recordedChunks.push(event.data);\n      var blob = new Blob(el.recordedChunks, {\n        type: \"video/webm\"\n      });\n      el.videoRecorded = URL.createObjectURL(blob);\n      var videoElement = document.getElementById(\"recordedVideoElement\");\n      videoElement.src = null;\n      videoElement.srcObject = null;\n      videoElement.src = el.videoRecorded;\n    } else {\n      console.log(\"no data available for recording\");\n    }\n  };\n};\nexport function setProgressBarColor(ctxt) {\n  let p = parseInt(ctxt.props.currentState.progress, 10);\n\n  if (p < 80) {\n    ctxt.progressBarColor = \"info\";\n  } else if (p < 100) {\n    ctxt.progressBarColor = \"success\";\n  } else {\n    ctxt.progressBarColor = \"danger\";\n  }\n\n  return ctxt.progressBarColor;\n}\nexport function ctrlBtnFunction(ctxt) {\n  switch (ctxt.props.currentState.stateName) {\n    case 'Idle':\n      ctxt.props.handler('GetCon'); // Dummy, despues vendra del servidor.\n\n      setTimeout(() => {\n        ctxt.props.handler('Countdown');\n        ctxt.startRecording();\n        ctxt.timeStartPressed = Date.now();\n      }, 1000); // Enviar al servidor la solicitud de conexión.\n\n      break;\n\n    case 'GetCon':\n      ctxt.props.handler('Idle');\n      break;\n\n    case 'Examination':\n      ctxt.props.handler('Review');\n      ctxt.stopRecording(); // Enviar al servidor la solicitud de diagnóstico.\n\n      break;\n\n    case 'Review':\n      ctxt.props.handler('Idle');\n      break;\n\n    default:\n      console.log(\"Error: Boton apretado en estado que no correspondía.\");\n  }\n}\nexport function countdown(canvas, el) {\n  console.log(el.timeStartPressed);\n  let context = canvas;\n  let countdown = el.props.countdownFrom - Math.trunc((-el.timeStartPressed + Date.now()) / 1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n  ;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n\n  if (countdown >= 10) {\n    context.fillText(countdown.toString(10), 200, 315);\n  } else if (countdown >= 1) {\n    context.fillText(countdown.toString(10), 270, 308, 100);\n  }\n\n  context.fill();\n\n  if (countdown < 1) {\n    el.props.handler(\"Examination\");\n  }\n}\nexport function urlToPromise(url) {\n  return new Promise(function (resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\nexport function downloadScreenshots(el) {\n  let zip = new JSZip();\n\n  for (let i = 0; i < el.props.currentState.GallerySrc.length; i++) {\n    let name = \"Screenshot_\" + i + \".jpeg\";\n    zip.file(name, urlToPromise(el.props.currentState.GallerySrc[i].src), {\n      binary: true\n    });\n  }\n\n  zip.generateAsync({\n    type: \"blob\"\n  }).then(function (content) {\n    FileSaver.saveAs(content, \"download.zip\");\n  });\n}\nexport default {\n  handleDataAvailable,\n  setProgressBarColor,\n  ctrlBtnFunction,\n  countdown,\n  urlToPromise,\n  downloadScreenshots\n};","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/functions.js"],"names":["JSZipUtils","handleDataAvailable","el","event","console","log","data","size","recordedChunks","push","blob","Blob","type","videoRecorded","URL","createObjectURL","videoElement","document","getElementById","src","srcObject","setProgressBarColor","ctxt","p","parseInt","props","currentState","progress","progressBarColor","ctrlBtnFunction","stateName","handler","setTimeout","startRecording","timeStartPressed","Date","now","stopRecording","countdown","canvas","context","countdownFrom","Math","trunc","beginPath","arc","PI","fillStyle","fill","fillText","toString","urlToPromise","url","Promise","resolve","reject","getBinaryContent","err","downloadScreenshots","zip","JSZip","i","GallerySrc","length","name","file","binary","generateAsync","then","content","FileSaver","saveAs"],"mappings":"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","sourcesContent":["import JSZipUtils from 'jszip-utils';\n\nexport var handleDataAvailable = function(el) {\n    return function (event) {\n      console.log('handleDataAvailable');\n        if (event.data && event.data.size > 0) {\n        el.recordedChunks.push(event.data);\n        var blob = new Blob(el.recordedChunks, {\n          type: \"video/webm\"\n        });\n        el.videoRecorded = URL.createObjectURL(blob);\n        var videoElement = document.getElementById(\"recordedVideoElement\");\n        videoElement.src = null;\n        videoElement.srcObject = null;\n        videoElement.src = el.videoRecorded;\n        }\n          else {\n          console.log(\"no data available for recording\");\n        }\n    }\n  }\n  \n  export function setProgressBarColor(ctxt){\n    let p =parseInt(ctxt.props.currentState.progress,10);\n    if (p < 80){\n      ctxt.progressBarColor = \"info\";\n    }\n    else if (p < 100){\n      ctxt.progressBarColor = \"success\";\n    }\n    else{\n      ctxt.progressBarColor = \"danger\";\n    }\n    return ctxt.progressBarColor;\n  }\n  \n  export function ctrlBtnFunction(ctxt){\n    switch(ctxt.props.currentState.stateName){\n      case 'Idle':\n        ctxt.props.handler('GetCon');\n        // Dummy, despues vendra del servidor.\n        setTimeout(()=>{ctxt.props.handler('Countdown');ctxt.startRecording();ctxt.timeStartPressed = Date.now();}, 1000);\n        // Enviar al servidor la solicitud de conexión.\n        break;\n      case 'GetCon':\n        ctxt.props.handler('Idle');\n        break;\n      case 'Examination':\n        ctxt.props.handler('Review');\n        ctxt.stopRecording();\n        // Enviar al servidor la solicitud de diagnóstico.\n        break;\n      case 'Review':\n        ctxt.props.handler('Idle');\n          break;\n      default:\n        console.log(\"Error: Boton apretado en estado que no correspondía.\")\n    }\n  }\n  \n  export function countdown(canvas,el){\n    console.log(el.timeStartPressed)\n      let context = canvas;\t\n      let countdown = el.props.countdownFrom- Math.trunc((-el.timeStartPressed + Date.now())/1000);\n    context.beginPath();\n    context.arc(320, 240, 130, 0, 2 * Math.PI);\n    context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n    context.fill();\n    context.beginPath();\n    context.fillStyle = \"black\";\n    if(countdown >= 10){\n      context.fillText(countdown.toString(10),200,315);\n    }else if(countdown >= 1){\n      context.fillText(countdown.toString(10),270,308,100);\n    }\n  \n    context.fill();\n    if (countdown <  1){\n          el.props.handler(\"Examination\");\n    }\n  }\n  \n  export function urlToPromise(url) {\n    return new Promise(function(resolve, reject) {\n      JSZipUtils.getBinaryContent(url, function (err, data) {\n        if(err) {\n          reject(err);\n        }\n        else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  export function downloadScreenshots(el){\n    let zip = new JSZip();\n    for(let i=0;i < el.props.currentState.GallerySrc.length; i++){\n      let name = \"Screenshot_\" + i + \".jpeg\";\n      zip.file(name,urlToPromise(el.props.currentState.GallerySrc[i].src),{binary:true});\n    }\n    zip.generateAsync({type: \"blob\"}).then(function(content) {\n      FileSaver.saveAs(content, \"download.zip\");\n    });\n  }\n\n  export default {handleDataAvailable, setProgressBarColor, ctrlBtnFunction, countdown, urlToPromise, downloadScreenshots}"]},"metadata":{},"sourceType":"module"}