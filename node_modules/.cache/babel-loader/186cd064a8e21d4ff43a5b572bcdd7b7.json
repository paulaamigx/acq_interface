{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container } from 'reactstrap';\n/* Container, Col, Row,\n Form, FormGroup, Label, Input,\n Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\n\nimport React from 'react';\nimport io from 'socket.io-client/dist/socket.io';\nvar videoFromDevice = document.createElement('video');\nvar canvasToSend = document.createElement(\"canvas\");\nvar contextToSend = canvasToSend.getContext('2d');\nvar selectVideoSrc = document.querySelector('#videoSource'); //select camera\n\nvideoFromDevice.style.display = 'none';\nvideoFromDevice.autoplay = true;\ncanvasToSend.style.display = 'none';\nvar frameURL;\nvar socket = io();\n\nfunction getStream() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n      console.log(\"mmmmm\");\n    });\n  }\n\n  const constraints = {\n    video: {\n      deviceId: {\n        exact: selectVideoSrc.value\n      },\n      width: {\n        ideal: 1280\n      },\n      height: {\n        ideal: 720\n      }\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(gotStream).catch(handleError);\n}\n\nfunction gotStream(stream, video) {\n  window.stream = stream; // make stream available to console\n\n  video.srcObject = stream; //var options = { mimeType: \"video/webm;codecs=vp8\" };\n  //mediaRecorder = new MediaRecorder(stream, options);\n}\n\nfunction handleError(error) {\n  console.error('Error: ', error);\n}\n\nfunction sendVideo(video, contextToSend) {\n  contextToSend.drawImage(video, 0, 0, contextToSend.width, contextToSend.height);\n  frameURL = canvasToSend.toDataURL(\"image/jpeg\", 0.5);\n\n  if (frameURL.split(\",\")[0].localeCompare(\"data:image/jpeg;base64\") === 0) {\n    //check it doesnt default to png, !check lag\n    socket.emit('stream', frameURL, \"1\");\n  }\n}\n\nfunction gotDevices(deviceInfos) {\n  for (let i = 0; i !== deviceInfos.length; ++i) {\n    const deviceInfo = deviceInfos[i];\n    const option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n\n    if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || 'camera ' + (selectVideoSrc.length + 1);\n      selectVideoSrc.appendChild(option);\n    }\n  }\n}\n\nfunction hasGetUserMedia() {\n  return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n}\n\nif (hasGetUserMedia()) {} else {\n  alert('getUserMedia() is not supported by your browser');\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).then(getStream).catch(handleError);\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \"Interferencia\"), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"preview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mirror\",\n      className: \"overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"M\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"startStopButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Start\"), /*#__PURE__*/React.createElement(\"select\", {\n      id: \"videoSource\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, \" \"));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","React","io","videoFromDevice","document","createElement","canvasToSend","contextToSend","getContext","selectVideoSrc","querySelector","style","display","autoplay","frameURL","socket","getStream","window","stream","getTracks","forEach","track","stop","console","log","constraints","video","deviceId","exact","value","width","ideal","height","navigator","mediaDevices","getUserMedia","then","gotStream","catch","handleError","srcObject","error","sendVideo","drawImage","toDataURL","split","localeCompare","emit","gotDevices","deviceInfos","i","length","deviceInfo","option","kind","text","label","appendChild","hasGetUserMedia","alert","enumerateDevices","InferenceUI","Component","constructor","props","state","render"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container\n    } from 'reactstrap';\n   /* Container, Col, Row,\n    Form, FormGroup, Label, Input,\n    Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\nimport React from 'react';\nimport io from 'socket.io-client/dist/socket.io';\nvar videoFromDevice = document.createElement('video');\nvar canvasToSend = document.createElement(\"canvas\");\nvar contextToSend = canvasToSend.getContext('2d');\nvar selectVideoSrc = document.querySelector('#videoSource'); //select camera\nvideoFromDevice.style.display = 'none';\nvideoFromDevice.autoplay = true;\ncanvasToSend.style.display = 'none';\n\nvar frameURL;\nvar socket = io();\nfunction getStream() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function(track) {\n      track.stop();\n      console.log(\"mmmmm\");\n    });\n\t}\n  const constraints = {\n    video: {\n      deviceId: {exact: selectVideoSrc.value},\n      width: {ideal: 1280},\n      height: {ideal: 720}\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).\n    then(gotStream).catch(handleError);\n}\n\nfunction gotStream(stream,video) {\n  window.stream = stream; // make stream available to console\n  video.srcObject = stream;\n  //var options = { mimeType: \"video/webm;codecs=vp8\" };\n  //mediaRecorder = new MediaRecorder(stream, options);\n}\n\nfunction handleError(error) {\n  console.error('Error: ', error);\n}\n\nfunction sendVideo(video,contextToSend){\n  contextToSend.drawImage(video,0,0,contextToSend.width,contextToSend.height);\n  frameURL = canvasToSend.toDataURL(\"image/jpeg\",0.5);\n  if(frameURL.split(\",\")[0].localeCompare(\"data:image/jpeg;base64\") === 0){ //check it doesnt default to png, !check lag\n\t  socket.emit('stream',frameURL,\"1\");\n  }\n}\n\nfunction gotDevices(deviceInfos) {\n  for (let i = 0; i !== deviceInfos.length; ++i) {\n    const deviceInfo = deviceInfos[i];\n    const option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n    if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || 'camera ' +\n        (selectVideoSrc.length + 1);\n      selectVideoSrc.appendChild(option);\n    } \n  }\n}\n\nfunction hasGetUserMedia() {\n  return !!(navigator.mediaDevices &&\n  navigator.mediaDevices.getUserMedia);\n}\nif (hasGetUserMedia()) {}\nelse {alert('getUserMedia() is not supported by your browser');}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).then(getStream).catch(handleError);\n\nclass InferenceUI extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n\t\n\n    render() {\n        return (\n\t\t\t\t\t<Container id=\"container\">\n         \t\t<h1>Interferencia</h1>\n\t\t\t\t\t\t<canvas id=\"preview\"></canvas>\n\t\t\t    \t<div id=\"mirror\" className=\"overlay\">M</div>\n\t\t\t    \t<button id=\"startStopButton\">Start</button>\n\t\t\t\t\t\t<select id=\"videoSource\" > </select>\n\t\t\t\t\t</Container>\n        );\n        \n    }\n}\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}