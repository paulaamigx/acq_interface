{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useState } from 'react'; //import './InferenceUI.css'\n\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\n\nimport { Carousel } from 'react-responsive-carousel';\nimport JSZip from 'jszip';\nimport JSZipUtils from 'jszip-utils';\nimport FileSaver from 'file-saver';\n\nclass Screenshots extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.captureScreenshot = async () => {\n      var canvas = document.querySelector(\"#canvasPreview\");\n      var imgAsDataURL = canvas.toDataURL(\"image/jpeg\", 1);\n      let newSlidesData = [{\n        src: imgAsDataURL,\n        thumbnail: imgAsDataURL,\n        thumbnailWidth: 160,\n        thumbnailHeight: 120\n      }];\n      this.props.setScreenshots(newSlidesData);\n    };\n\n    this.state = {};\n    this.selected = 0;\n  }\n\n  download() {\n    let zip = new JSZip();\n\n    for (let i = 0; i < this.props.currentState.screenshots.length; i++) {\n      let name = \"Screenshot_\" + i + \".jpeg\";\n      zip.file(name, urlToPromise(this.props.currentState.screenshots[i].src), {\n        binary: true\n      });\n    }\n\n    zip.generateAsync({\n      type: \"blob\"\n    }).then(function (content) {\n      FileSaver.saveAs(content, \"download.zip\");\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"screenshots\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 4\n      }\n    });\n  }\n\n} //convert imgs to download\n\n\nfunction urlToPromise(url) {\n  return new Promise(function (resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nexport default Screenshots;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js"],"names":["Modal","ModalHeader","ModalBody","ModalFooter","React","useState","Carousel","JSZip","JSZipUtils","FileSaver","Screenshots","Component","constructor","props","captureScreenshot","canvas","document","querySelector","imgAsDataURL","toDataURL","newSlidesData","src","thumbnail","thumbnailWidth","thumbnailHeight","setScreenshots","state","selected","download","zip","i","currentState","screenshots","length","name","file","urlToPromise","binary","generateAsync","type","then","content","saveAs","render","url","Promise","resolve","reject","getBinaryContent","err","data"],"mappings":";AAAA,SAAQA,KAAR,EAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,WAAvC,QACW,YADX;AAEA,OAAOC,KAAP,IAAeC,QAAf,QAA6B,OAA7B,C,CACA;;AACA,OAAO,uDAAP,C,CAAgE;;AAChE,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAOnBC,iBAPmB,GAOC,YAAY;AAC9B,UAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAb;AACD,UAAIC,YAAY,GAAGH,MAAM,CAACI,SAAP,CAAiB,YAAjB,EAA8B,CAA9B,CAAnB;AACE,UAAIC,aAAa,GAAG,CAAC;AAACC,QAAAA,GAAG,EAAEH,YAAN;AACCI,QAAAA,SAAS,EAAEJ,YADZ;AAECK,QAAAA,cAAc,EAAE,GAFjB;AAGCC,QAAAA,eAAe,EAAE;AAHlB,OAAD,CAApB;AAKA,WAAKX,KAAL,CAAWY,cAAX,CAA0BL,aAA1B;AACH,KAhBmB;;AAEhB,SAAKM,KAAL,GAAa,EAAb;AAEA,SAAKC,QAAL,GAAgB,CAAhB;AACD;;AAYFC,EAAAA,QAAQ,GAAE;AACT,QAAIC,GAAG,GAAG,IAAItB,KAAJ,EAAV;;AACA,SAAI,IAAIuB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAG,KAAKjB,KAAL,CAAWkB,YAAX,CAAwBC,WAAxB,CAAoCC,MAApD,EAA4DH,CAAC,EAA7D,EAAgE;AAC/D,UAAII,IAAI,GAAG,gBAAgBJ,CAAhB,GAAoB,OAA/B;AACAD,MAAAA,GAAG,CAACM,IAAJ,CAASD,IAAT,EAAcE,YAAY,CAAC,KAAKvB,KAAL,CAAWkB,YAAX,CAAwBC,WAAxB,CAAoCF,CAApC,EAAuCT,GAAxC,CAA1B,EAAuE;AAACgB,QAAAA,MAAM,EAAC;AAAR,OAAvE;AACA;;AACDR,IAAAA,GAAG,CAACS,aAAJ,CAAkB;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAlB,EAAkCC,IAAlC,CAAuC,UAASC,OAAT,EAAkB;AACvDhC,MAAAA,SAAS,CAACiC,MAAV,CAAiBD,OAAjB,EAA0B,cAA1B;AACD,KAFD;AAGA;;AAEDE,EAAAA,MAAM,GAAE;AACL,wBACD;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC;AAIF;;AAlCuC,C,CAsCzC;;;AACA,SAASP,YAAT,CAAsBQ,GAAtB,EAA2B;AACzB,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CvC,IAAAA,UAAU,CAACwC,gBAAX,CAA4BJ,GAA5B,EAAiC,UAAUK,GAAV,EAAeC,IAAf,EAAqB;AACpD,UAAGD,GAAH,EAAQ;AACNF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD,OAFD,MAGK;AACHH,QAAAA,OAAO,CAACI,IAAD,CAAP;AACD;AACF,KAPD;AAQD,GATM,CAAP;AAUD;;AACD,eAAexC,WAAf","sourcesContent":["import {Modal, ModalHeader, ModalBody, ModalFooter \n    } from 'reactstrap';\nimport React, {useState}from 'react';\n//import './InferenceUI.css'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nimport JSZip from 'jszip';\nimport JSZipUtils from 'jszip-utils';\nimport FileSaver from 'file-saver';\n\nclass Screenshots extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n    };\n    this.selected = 0;\n  }\n\n\tcaptureScreenshot = async () => {\n  \tvar canvas = document.querySelector(\"#canvasPreview\");\n\t\tvar imgAsDataURL = canvas.toDataURL(\"image/jpeg\",1);\n    let newSlidesData = [{src: imgAsDataURL, \n                          thumbnail: imgAsDataURL,\n                          thumbnailWidth: 160,\n                          thumbnailHeight: 120\n                        }];\n    this.props.setScreenshots(newSlidesData);\n}\n\tdownload(){\n\t\tlet zip = new JSZip();\n\t\tfor(let i=0;i < this.props.currentState.screenshots.length; i++){\n\t\t\tlet name = \"Screenshot_\" + i + \".jpeg\";\n\t\t\tzip.file(name,urlToPromise(this.props.currentState.screenshots[i].src),{binary:true});\n\t\t}\n\t\tzip.generateAsync({type: \"blob\"}).then(function(content) {\n  \t\tFileSaver.saveAs(content, \"download.zip\");\n\t\t});\n\t}\n\n\trender(){\n    return(\n\t\t\t<div id=\"screenshots\">\n\t\t\t</div>\n    );\n\t}\n\n}\n\n//convert imgs to download\nfunction urlToPromise(url) {\n  return new Promise(function(resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n      if(err) {\n        reject(err);\n      }\n      else {\n        resolve(data);\n      }\n    });\n  });\n}\nexport default Screenshots;\n"]},"metadata":{},"sourceType":"module"}