{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js\";\nimport './InferenceUI.css';\nimport React from 'react';\nimport { Button } from 'reactstrap';\nvar c = 0;\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.enumerateDevices().then(deviceInfos => {\n      for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || 'camera ' + (this.selectVideoSrc.current.length + 1);\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      }\n    }).then(navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: \"environment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n    }));\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvasPreview.current;\n        const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n        canvasPreviewElement.height = video.videoHeight;\n        canvasPreviewElement.width = video.videoWidth;\n        canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n        if (this.props.currentState.almostStreaming) {\n          canvasPreview.font = \"200px Arial\";\n          countdown(canvasPreview, this);\n        }\n\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const {\n      isVideoLoading\n    } = this.state;\n    console.log(\"render\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      width: \"400\",\n      height: \"400\",\n      autoPlay: true,\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      id: \"canvasPreview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mirror\",\n      className: \"overlay\",\n      onClick: () => {\n        mirror();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"M\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"videoSelectDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      ref: this.selectVideoSrc,\n      style: {\n        width: 300\n      },\n      id: \"videoSelect\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: () => {\n        console.log(this.props);\n        document.getElementById(\"videoSelectDiv\").remove();\n        this.props.handler(\"OnConnection\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 6\n      }\n    }, \"Ok\")), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 28\n      }\n    }, \"Please wait while we load the video stream.\"));\n  }\n\n}\n\nfunction mirror() {\n  console.log(\"mirrorout\");\n  let context = document.querySelector(\"#canvasPreview\").getContext('2d');\n  console.log(context);\n  context.translate(context.width, 0);\n  context.scale(-1, 1);\n  context.beginPath();\n  context.fillText(\"sa\", 10, 10);\n  context.fill();\n  c++;\n}\n\nfunction countdown(canvas, el) {\n  let context = canvas;\n  let countdown = el.props.countdownFrom - Math.trunc((-el.props.currentState.timeStartPressed + Date.now()) / 1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n  ;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n\n  if (countdown >= 10) {\n    context.fillText(countdown.toString(10), 200, 315);\n  } else if (countdown >= 1) {\n    context.fillText(countdown.toString(10), 270, 308, 100);\n  }\n\n  context.fill();\n\n  if (countdown < 1) {\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n    el.props.handler(\"Streaming\");\n  }\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream.js"],"names":["React","Button","c","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","selectVideoSrc","tick","bind","componentDidMount","navigator","mediaDevices","enumerateDevices","then","deviceInfos","i","length","deviceInfo","option","document","createElement","value","deviceId","kind","text","label","current","appendChild","getUserMedia","video","facingMode","stream","srcObject","requestAnimationFrame","window","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","height","videoHeight","width","videoWidth","drawImage","currentState","almostStreaming","font","countdown","render","console","log","display","mirror","getElementById","remove","handler","context","querySelector","translate","scale","beginPath","fillText","fill","canvas","el","countdownFrom","Math","trunc","timeStartPressed","Date","now","arc","PI","fillStyle","toString","streaming"],"mappings":"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","sourcesContent":["import './InferenceUI.css'\nimport React from 'react';\nimport {Button} from 'reactstrap';\n\nvar c = 0;\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n  componentDidMount() {\n    navigator.mediaDevices\n\t\t.enumerateDevices()\n\t\t.then( deviceInfos => {\n\t\t\t\tfor (let i = 0; i !== deviceInfos.length; ++i) {\n\t\t\t\t\tconst deviceInfo = deviceInfos[i];\n\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\toption.value = deviceInfo.deviceId;\n\t\t\t\t\tif (deviceInfo.kind === 'videoinput') {\n\t\t\t\t\t\toption.text = deviceInfo.label || 'camera ' +\n\t\t\t\t\t\t\t(this.selectVideoSrc.current.length + 1);\n\t\t\t\t\t\tthis.selectVideoSrc.current.appendChild(option);\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t})\t\t\t\t \n\t\t.then(navigator.mediaDevices\n\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n        window.stream = stream;\n      })\n\t\t);\n  }\n\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasPreviewElement = this.canvasPreview.current;\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n            video,\n            0,\n            0,\n            canvasPreviewElement.width,\n            canvasPreviewElement.height\n          );\n\t\t\t\t\tif(this.props.currentState.almostStreaming){\n\t\t\t\t\t\tcanvasPreview.font = \"200px Arial\"\n\t\t\t\t\t\tcountdown(canvasPreview,this);\n\t\t\t\t\t}\n           requestAnimationFrame(this.tick);\n\n      }\n    }, 50);\n  }\n  render() {\n    const { isVideoLoading } = this.state;\n    console.log(\"render\");\n    return (\n      <div>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          style={{ display: \"none\" }}\n        />\n\n        {!isVideoLoading && \n        <div id=\"container\">\n          <canvas ref={this.canvasPreview} id=\"canvasPreview\" />\n          <div id=\"mirror\" className=\"overlay\" onClick={()=>{mirror()}}>M</div>\n        </div>\n        }\n\t\t\t\t<div id=\"videoSelectDiv\">\n\t\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\t\tstyle={{width: 300 }}\n\t\t\t\t\t\t\t\t\tid=\"videoSelect\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t/>\n\t\t\t\t\t<Button color='primary' onClick={()=>{\n\t\t\t\t\t\t\t\t\t\tconsole.log(this.props);\n\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"videoSelectDiv\").remove();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tthis.props.handler(\"OnConnection\");\n\t\t\t\t\t}}>Ok</Button>\n\t\t\t\t</div>\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n\n      </div>\n    );\n  }\n}\nfunction mirror(){\n  console.log(\"mirrorout\");\n  let context = document.querySelector(\"#canvasPreview\").getContext('2d');\n  console.log(context);\n  context.translate(context.width, 0);\n  context.scale(-1, 1);  \n  context.beginPath();\n  context.fillText(\"sa\",10,10);\n  context.fill();\n  c++;\n}\nfunction countdown(canvas,el){\n\tlet context = canvas;\t\n\tlet countdown = el.props.countdownFrom- Math.trunc((-el.props.currentState.timeStartPressed + Date.now())/1000);\n  context.beginPath();\n  context.arc(320, 240, 130, 0, 2 * Math.PI);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\";;\n  context.fill();\n  context.beginPath();\n  context.fillStyle = \"black\";\n  if(countdown >= 10){\n    context.fillText(countdown.toString(10),200,315);\n  }else if(countdown >= 1){\n    context.fillText(countdown.toString(10),270,308,100);\n  }\n\n  context.fill();\n  if (countdown <  1){\n    el.props.currentState.almostStreaming = false;\n    el.props.currentState.streaming = true;\n\t\tel.props.handler(\"Streaming\");\n  }\n\t\n}\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}