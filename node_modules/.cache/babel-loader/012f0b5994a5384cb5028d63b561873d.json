{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js\";\nimport './WebcamStream.css';\nimport React from 'react';\nimport { Button, Alert, Progress } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { handleDataAvailable, setProgressBarColor, ctrlBtnFunction, countdown, urlToPromise, downloadScreenshots, downloadVideo, captureScreenshot, mirror, fullScreen } from './functions.js'; // Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true,\n      fullScreen: false\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n    this.countdownFrom = 1;\n    this.timeStartPressed = null;\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.videoRecorded = null;\n    this.mirrorScale = [1, 1];\n    this.mirrorTranslate = [0, 0];\n    this.canvasHeight = 0;\n    this.canvasWidth = 0;\n  }\n\n  setStream() {\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\"); // Falta cerrar el stream anterior antes de abrir uno nuevo.\n\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.value ? {\n          exact: selectVideoSrc.value\n        } : undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        var canvasPreviewElement = this.canvasPreview.current;\n\n        if (canvasPreviewElement) {\n          var canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.translate(this.mirrorTranslate[0], this.mirrorTranslate[1]);\n          canvasPreview.scale(this.mirrorScale[0], this.mirrorScale[1]);\n          canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n\n          if (this.props.currentState.stateName.localeCompare(\"Countdown\") === 0) {\n            canvasPreview.font = \"200px Arial\";\n            countdown(canvasPreview, this);\n          }\n\n          requestAnimationFrame(this.tick);\n        }\n      }\n    }, 50);\n  }\n\n  startRecording() {\n    var options = {\n      mimeType: \"video/webm;codecs=vp8\"\n    };\n    this.mediaRecorder = new MediaRecorder(this.canvasPreview.current.captureStream(), options);\n    this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n    this.mediaRecorder.start();\n    this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\", 1));\n  }\n\n  stopRecording() {\n    this.mediaRecorder.stop();\n  }\n\n  downloadVideo() {\n    downloadVideo(this);\n  }\n\n  captureScreenshot() {\n    captureScreenshot(this);\n  }\n\n  downloadScreenshots() {\n    downloadScreenshots(this);\n  }\n\n  mirror(way) {\n    mirror(this, way);\n  }\n\n  componentDidMount() {\n    //initial message on canvas\n    let cnvs = document.getElementById(\"canvasMessage\");\n    cnvs.style.height = cnvs.clientWidth * 3 / 4 + \"px\";\n    cnvs.style.backgroundColor = \"black\";\n    var ctx = cnvs.getContext(\"2d\");\n    ctx.font = \"10px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(\"Seleccione un dispositivo de imagen en\", cnvs.width / 10, 3 * cnvs.height / 8);\n    ctx.fillText(\"el panel de  configuración.\", cnvs.width / 10, 4 * cnvs.height / 8); //disp\n\n    let cnvsMsg = document.getElementById(\"canvasMessage\");\n    let btns = document.getElementById(\"buttons\");\n    console.log(cnvsMsg);\n    btns.style.top = cnvsMsg.clientHeight + \"px\";\n    btns.style.width = cnvsMsg.clientWidth + \"px\";\n  }\n\n  render() {\n    const isVideoLoading = this.state.isVideoLoading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"WebcamStream_Wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      autoPlay: true,\n      id: \"video\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvasDiv\",\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, this.props.currentState.canvasAlert && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 19\n      }\n    }, \"Verifique el enfoque del dispositivo.\")), this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"alert\",\n      style: {\n        position: 'absolute',\n        zIndex: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      color: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 19\n      }\n    }, \"Estableciendo conexi\\xF3n con el servidor.\")), this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      id: \"canvasPreview\",\n      style: {\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 19\n      }\n    }))), !this.props.currentState.renderCanvas && /*#__PURE__*/React.createElement(\"video\", {\n      id: \"recordedVideoElement\",\n      controls: true,\n      srcObject: null,\n      src: null,\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }), isVideoLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvasMessage\",\n      className: \"canvasRendered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      id: \"ctrlBtn\",\n      color: \"primary\",\n      size: \"xl\",\n      onClick: () => {\n        ctrlBtnFunction(this);\n      },\n      disabled: !this.props.currentState.enableCtrlBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, this.props.currentState.textCtrlBtn), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"screenshotBtn\",\n      onClick: () => this.captureScreenshot(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"fullScreenBtn\",\n      size: \"s\",\n      onClick: () => fullScreen(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        zIndex: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: ['fas', 'fa-expand'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: [\"fal\", \"coffee\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-expand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }))), this.props.currentState.showProgressBar && /*#__PURE__*/React.createElement(Progress, {\n      value: this.props.currentState.progress,\n      color: setProgressBarColor(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default WebcamStream;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/WebcamStream/WebcamStream.js"],"names":["React","Button","Alert","Progress","FontAwesomeIcon","handleDataAvailable","setProgressBarColor","ctrlBtnFunction","countdown","urlToPromise","downloadScreenshots","downloadVideo","captureScreenshot","mirror","fullScreen","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","selectVideoSrc","tick","bind","countdownFrom","timeStartPressed","mediaRecorder","recordedChunks","videoRecorded","mirrorScale","mirrorTranslate","canvasHeight","canvasWidth","setStream","document","getElementById","navigator","mediaDevices","getUserMedia","video","deviceId","value","exact","undefined","facingMode","then","stream","current","srcObject","requestAnimationFrame","window","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","height","videoHeight","width","videoWidth","translate","scale","drawImage","currentState","stateName","localeCompare","font","startRecording","options","mimeType","MediaRecorder","captureStream","ondataavailable","start","getVideoThumbnail","toDataURL","stopRecording","stop","way","componentDidMount","cnvs","style","clientWidth","backgroundColor","ctx","fillStyle","fillText","cnvsMsg","btns","console","log","top","clientHeight","render","display","canvasAlert","position","zIndex","renderCanvas","enableCtrlBtn","textCtrlBtn","showProgressBar","progress"],"mappings":"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","sourcesContent":["import './WebcamStream.css'\nimport React from 'react';\nimport {Button, Alert, Progress} from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nimport {handleDataAvailable, setProgressBarColor, ctrlBtnFunction, countdown, \n        urlToPromise, downloadScreenshots, downloadVideo, captureScreenshot, mirror,\n        fullScreen} from './functions.js';\n\n// Agregar variable para almacenar la hora en que se apretó el start.\n// Administrar el fullscreen desde acá ahora.\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isVideoLoading: true,\n      fullScreen: false\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n\n    this.countdownFrom = 1;\n    this.timeStartPressed = null;\n\n    this.mediaRecorder = null;\n    this.recordedChunks= [];\n\t  this.videoRecorded = null;\n\n    this.mirrorScale = [1,1];\n    this.mirrorTranslate = [0,0];\n\n    this.canvasHeight = 0;\n    this.canvasWidth = 0;\n    \n  }\n\n  setStream(){\n    var selectVideoSrc = document.getElementById(\"videoSelectConf\");\n    // Falta cerrar el stream anterior antes de abrir uno nuevo.\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: selectVideoSrc.value? {exact: selectVideoSrc.value}:undefined,\n        facingMode: \"enviroment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n      window.stream = stream;\n\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n          var canvasPreviewElement = this.canvasPreview.current;\n          if(canvasPreviewElement){\n          var canvasPreview = canvasPreviewElement.getContext(\"2d\");\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.translate(this.mirrorTranslate[0],this.mirrorTranslate[1]);\n          canvasPreview.scale(this.mirrorScale[0],this.mirrorScale[1]);\n          canvasPreview.drawImage(\n              video,\n              0,\n              0,\n              canvasPreviewElement.width,\n              canvasPreviewElement.height\n           );\n           if(this.props.currentState.stateName.localeCompare(\"Countdown\")===0){\n             canvasPreview.font = \"200px Arial\"\n             countdown(canvasPreview,this);\n           }\n           requestAnimationFrame(this.tick);\n           }\n      }\n    }, 50);\n  }\n\n  startRecording(){\n      var options = { mimeType: \"video/webm;codecs=vp8\" };\n      this.mediaRecorder = new MediaRecorder(this.canvasPreview.current.captureStream(), options);\n      this.mediaRecorder.ondataavailable = handleDataAvailable(this);\n      this.mediaRecorder.start();\n      this.props.getVideoThumbnail(this.canvasPreview.current.toDataURL(\"image/jpeg\",1));\n  }\n\n\tstopRecording(){\n    this.mediaRecorder.stop();\n\t}\n\n\tdownloadVideo(){\n\t\tdownloadVideo(this);\t\n\t}\n  \n  captureScreenshot(){\n    captureScreenshot(this);\n    }\n\n  downloadScreenshots(){\n    downloadScreenshots(this);\n  }\n  \n  mirror(way){\n    mirror(this,way);\n  }\n  componentDidMount(){\n\t\t//initial message on canvas\n    let cnvs = document.getElementById(\"canvasMessage\");\n    cnvs.style.height = cnvs.clientWidth*3/4+\"px\";\n\t\tcnvs.style.backgroundColor= \"black\";\n\t\tvar ctx = cnvs.getContext(\"2d\");\n\t\tctx.font = \"10px Arial\";\n\t\tctx.fillStyle = \"white\";\n\t\tctx.fillText(\"Seleccione un dispositivo de imagen en\" , cnvs.width/10, 3*cnvs.height/8);\n\t\tctx.fillText(\"el panel de  configuración.\", cnvs.width/10, 4*cnvs.height/8);\n\n    //disp\n    let cnvsMsg = document.getElementById(\"canvasMessage\");\n    let btns= document.getElementById(\"buttons\");\n\n    console.log(cnvsMsg);\n    btns.style.top = cnvsMsg.clientHeight + \"px\";\n    btns.style.width = cnvsMsg.clientWidth + \"px\";\n     \n  }\n\n  render() {\n    const isVideoLoading = this.state.isVideoLoading;\n    return (\n      <div className=\"WebcamStream_Wrapper\">\n        {/* Dummy video tag to recieve UserMedia stream.*/}\n        <video\n          ref={this.videoTag}\n          autoPlay\n          id = \"video\"\n          style={{ display: \"none\"}}\n        />\n\n        {!isVideoLoading &&\n            <div id=\"canvasDiv\" className=\"canvasRendered\">\n              {this.props.currentState.canvasAlert &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"warning\">Verifique el enfoque del dispositivo.</Alert>\n                </div>\n              }\n\n              {this.props.currentState.stateName.localeCompare(\"GetCon\") === 0 &&\n                <div id=\"alert\" style={{position: 'absolute', zIndex: 2}}>\n                  <Alert color=\"info\">Estableciendo conexión con el servidor.</Alert>\n                </div>\n              }\n              \n              {this.props.currentState.renderCanvas &&\n                <div>\n                  <canvas ref={this.canvasPreview}\n                          id=\"canvasPreview\"\n                          style={{width:\"100%\"}}/>\n\n                </div>\n              }\n            </div>}\n        {!this.props.currentState.renderCanvas &&\n          <video id = \"recordedVideoElement\"\n                 controls\n                 srcObject = {null}\n                 src={null}\n                 className=\"canvasRendered\"/>\n        }\n        \n        {isVideoLoading &&\n          <div>\n            <canvas id=\"canvasMessage\"\n                    className=\"canvasRendered\"/>\n          </div>\n        }\n\t\t\t\t<div id=\"buttons\">\n          <Button id=\"ctrlBtn\"\n                  color=\"primary\"\n                  size=\"xl\"\n                  onClick={()=>{ctrlBtnFunction(this);}}\n                  disabled={!this.props.currentState.enableCtrlBtn}>\n                  {this.props.currentState.textCtrlBtn}</Button>\n          <div  id=\"screenshotBtn\"\n                onClick={() => this.captureScreenshot()}/>\n          <div  id = \"fullScreenBtn\"\n                size=\"s\" \n                onClick={()=>fullScreen(this)}>\n                <div style={{zIndex: 10}}>\n                <FontAwesomeIcon icon={['fas', 'fa-expand']} />\n                <FontAwesomeIcon icon={[\"fal\", \"coffee\"]} />\n                <i class=\"fas fa-expand\"></i>\n                </div>\n          </div>\n        {this.props.currentState.showProgressBar && \n          <Progress value={this.props.currentState.progress} \n                    color={setProgressBarColor(this)}/>}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default WebcamStream;\n"]},"metadata":{},"sourceType":"module"}