{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useState } from 'react'; //import './InferenceUI.css'\n\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\n\nimport { Carousel } from 'react-responsive-carousel';\nimport JSZip from 'jszip';\nimport JSZipUtils from 'jszip-utils';\nimport FileSaver from 'file-saver';\n\nclass Screenshots extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.captureScreenshot = async () => {\n      var canvas = document.querySelector(\"#canvasPreview\");\n      var imgAsDataURL = canvas.toDataURL(\"image/jpeg\", 1);\n      let newSlidesData = [{\n        src: imgAsDataURL,\n        thumbnail: imgAsDataURL,\n        thumbnailWidth: 320,\n        thumbnailHeight: 240\n      }];\n      this.props.setScreenshots(newSlidesData);\n      await this.setState({\n        lastScreenshotID: this.state.lastScreenshotID + 1\n      });\n      let thumbs = document.getElementsByClassName(\"thumb\");\n\n      thumbs[thumbs.length - 1].onclick = async a => {\n        if (this.props.currentState.enabledModalScreenshots) {\n          this.selected = a.target.childNodes[0].id;\n          this.setState({\n            modalOn: true\n          });\n        }\n      };\n\n      let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\n      try {\n        btnsCarousel[2].style.backgroundColor = 'black';\n        btnsCarousel[3].style.backgroundColor = 'black';\n      } catch {}\n\n      document.querySelector(\".carousel-slider\").style.display = 'none';\n    };\n\n    this.state = {\n      lastScreenshotID: 0,\n      modalOn: false //slidesData: []\n\n    };\n    this.selected = 0;\n  }\n\n  getScreenshots() {\n    return this.state.slidesData;\n  }\n\n  download() {\n    let zip = new JSZip();\n\n    for (let i = 0; i < this.props.currentState.screenshots.length; i++) {\n      let name = \"Screenshot_\" + i + \".jpeg\";\n      zip.file(name, urlToPromise(this.props.currentState.screenshots[i].src), {\n        binary: true\n      });\n    }\n\n    zip.generateAsync({\n      type: \"blob\"\n    }).then(function (content) {\n      FileSaver.saveAs(content, \"download.zip\");\n    });\n  }\n  /*\n  render(){\n    let classNameToRender = (this.props.currentState.fullScreen)? \"FullScreen\":\"RegularScreen\";\n    return(\n  \t<div id=\"screenshots\"\n           class = {\"screenshots\" + classNameToRender}>\n  \t\t{this.state.modalOn && \n          <ModalScreenshots handler={()=>{this.setState({modalOn:false})}} \n                            data={this.props.currentState.screenshots} \n                            selected={this.selected}/>}\n        <Carousel showArrows={true} \n                  selectedItem={this.state.lastScreenshotID} >\n        {this.props.currentState.screenshots.map((slide) =>\n          <div key={this.state.lastScreenshotID}>\n            <img className=\"slick-slide-image\" src={slide.src} alt='' id={slide.id}/>\n          </div>)}\n        </Carousel>\n  \t</div>\n    );\n  }\n  */\n\n\n}\n\nconst ModalScreenshots = props => {\n  const {\n    className,\n    data,\n    selected\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal);\n    props.handler();\n  };\n\n  let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\n  try {\n    btnsCarousel[6].style.backgroundColor = 'green';\n    btnsCarousel[6].style.zIndex = 5;\n  } catch (e) {}\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    size: 'xl',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Modal title\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Carousel, {\n    showArrows: true,\n    selectedItem: selected,\n    id: \"modalScreenshot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, data.map(slide => /*#__PURE__*/React.createElement(\"div\", {\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"slick-slide-image\",\n    src: slide.src,\n    alt: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })));\n}; //convert imgs to download\n\n\nfunction urlToPromise(url) {\n  return new Promise(function (resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nexport default Screenshots;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/Screenshots.js"],"names":["Modal","ModalHeader","ModalBody","ModalFooter","React","useState","Carousel","JSZip","JSZipUtils","FileSaver","Screenshots","Component","constructor","props","captureScreenshot","canvas","document","querySelector","imgAsDataURL","toDataURL","newSlidesData","src","thumbnail","thumbnailWidth","thumbnailHeight","setScreenshots","setState","lastScreenshotID","state","thumbs","getElementsByClassName","length","onclick","a","currentState","enabledModalScreenshots","selected","target","childNodes","id","modalOn","btnsCarousel","style","backgroundColor","display","getScreenshots","slidesData","download","zip","i","screenshots","name","file","urlToPromise","binary","generateAsync","type","then","content","saveAs","ModalScreenshots","className","data","modal","setModal","toggle","handler","zIndex","e","map","slide","url","Promise","resolve","reject","getBinaryContent","err"],"mappings":"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","sourcesContent":["import {Modal, ModalHeader, ModalBody, ModalFooter \n    } from 'reactstrap';\nimport React, {useState}from 'react';\n//import './InferenceUI.css'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nimport JSZip from 'jszip';\nimport JSZipUtils from 'jszip-utils';\nimport FileSaver from 'file-saver';\n\nclass Screenshots extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      lastScreenshotID: 0,\n      modalOn: false,\n      //slidesData: []\n    };\n    this.selected = 0;\n  }\n\n\tcaptureScreenshot = async () => {\n  \tvar canvas = document.querySelector(\"#canvasPreview\");\n\t\tvar imgAsDataURL = canvas.toDataURL(\"image/jpeg\",1);\n    \n    let newSlidesData = [{src: imgAsDataURL, \n                          thumbnail: imgAsDataURL,\n                          thumbnailWidth: 320,\n                          thumbnailHeight: 240\n                        }];\n    this.props.setScreenshots(newSlidesData);\n\t\tawait this.setState({lastScreenshotID: this.state.lastScreenshotID+1});\n\t\t\n\t  let thumbs = document.getElementsByClassName(\"thumb\");\n\t\tthumbs[thumbs.length-1].onclick = async(a) => {\n\t\t\tif(this.props.currentState.enabledModalScreenshots){\n        this.selected = a.target.childNodes[0].id;\n        this.setState({modalOn: true});\n\n\t\t\t}\n\t\t};\t\n\n    let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n\t\ttry{\n\t\t\tbtnsCarousel[2].style.backgroundColor= 'black';\n\t\t\tbtnsCarousel[3].style.backgroundColor= 'black';\n\t\t}\n\t\tcatch{\n\t\t}\n\t\tdocument.querySelector(\".carousel-slider\").style.display = 'none';\n\n}\n  getScreenshots(){\n    return this.state.slidesData;\n  }\n\tdownload(){\n\t\tlet zip = new JSZip();\n\t\tfor(let i=0;i < this.props.currentState.screenshots.length; i++){\n\t\t\tlet name = \"Screenshot_\" + i + \".jpeg\";\n\t\t\tzip.file(name,urlToPromise(this.props.currentState.screenshots[i].src),{binary:true});\n\t\t}\n\t\tzip.generateAsync({type: \"blob\"}).then(function(content) {\n  \t\tFileSaver.saveAs(content, \"download.zip\");\n\t\t});\n\t}\n  /*\n\trender(){\n    let classNameToRender = (this.props.currentState.fullScreen)? \"FullScreen\":\"RegularScreen\";\n    return(\n\t\t\t<div id=\"screenshots\"\n           class = {\"screenshots\" + classNameToRender}>\n\t\t\t\t{this.state.modalOn && \n          <ModalScreenshots handler={()=>{this.setState({modalOn:false})}} \n                            data={this.props.currentState.screenshots} \n                            selected={this.selected}/>}\n        <Carousel showArrows={true} \n                  selectedItem={this.state.lastScreenshotID} >\n        {this.props.currentState.screenshots.map((slide) =>\n          <div key={this.state.lastScreenshotID}>\n            <img className=\"slick-slide-image\" src={slide.src} alt='' id={slide.id}/>\n          </div>)}\n        </Carousel>\n\t\t\t</div>\n    );\n\t}\n  */\n\n}\n\nconst ModalScreenshots = (props) => {\n  const {\n    className,\n    data,\n    selected,\n  } = props;\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => {\n    setModal(!modal); \n\t\tprops.handler();\n  }\n  let btnsCarousel = document.getElementsByClassName(\"control-arrow\");\n  \n  try{\n    btnsCarousel[6].style.backgroundColor = 'green';\n    btnsCarousel[6].style.zIndex= 5;\n  \n\t}\n\tcatch(e){}\n\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className={className} size={'xl'}>\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n        <ModalBody>\n        <Carousel showArrows={true} selectedItem={selected} id=\"modalScreenshot\" >\n          {data.map((slide) =>\n            <div key={0}>\n              <img className=\"slick-slide-image\" src={slide.src} alt='Error' />\n            </div>\n          )}\n        </Carousel>\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n//convert imgs to download\nfunction urlToPromise(url) {\n  return new Promise(function(resolve, reject) {\n    JSZipUtils.getBinaryContent(url, function (err, data) {\n      if(err) {\n        reject(err);\n      }\n      else {\n        resolve(data);\n      }\n    });\n  });\n}\nexport default Screenshots;\n"]},"metadata":{},"sourceType":"module"}