{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container } from 'reactstrap';\n/* Container, Col, Row,\n Form, FormGroup, Label, Input,\n Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\n\nimport React, { useRef, useEffect } from 'react'; //import io from 'socket.io-client';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n    this.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n\n  getStream() {\n    if (window.stream) {\n      window.stream.getTracks().forEach(function (track) {\n        track.stop();\n        console.log(\"mmmmm\");\n      });\n    }\n\n    const constraints = {\n      video: {\n        deviceId: {\n          exact: selectVideoSrc.value\n        },\n        width: {\n          ideal: 1280\n        },\n        height: {\n          ideal: 720\n        }\n      }\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(gotStream).catch(handleError);\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.enumerateDevices().then(deviceInfos => {\n      for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || 'camera ' + (this.selectVideoSrc.current.length + 1);\n          this.selectVideoSrc.current.appendChild(option);\n        }\n      }\n    }).then(this.getStream);\n    /*\n          .getUserMedia({ video: { facingMode: \"environment\" } })\n          .then(stream => {\n            this.videoTag.current.srcObject = stream;\n            requestAnimationFrame(this.tick);\n            window.stream = stream;\n          });\n    */\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasPreviewElement = this.canvasPreview.current;\n        const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n        canvasPreviewElement.height = video.videoHeight;\n        canvasPreviewElement.width = video.videoWidth;\n        canvasPreview.drawImage(video, 0, 0, canvasPreviewElement.width, canvasPreviewElement.height);\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const {\n      isVideoLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      width: \"400\",\n      height: \"400\",\n      autoPlay: true,\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPreview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 28\n      }\n    }, \"Please wait while we load the video stream.\"), /*#__PURE__*/React.createElement(\"select\", {\n      ref: this.selectVideoSrc,\n      style: {\n        width: 300\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(WebcamStream, {\n      id: \"asa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","React","useRef","useEffect","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvasPreview","selectVideoSrc","tick","bind","getStream","window","stream","getTracks","forEach","track","stop","console","log","constraints","video","deviceId","exact","value","width","ideal","height","navigator","mediaDevices","getUserMedia","then","gotStream","catch","handleError","componentDidMount","enumerateDevices","deviceInfos","i","length","deviceInfo","option","document","createElement","kind","text","label","current","appendChild","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasPreviewElement","getContext","videoHeight","videoWidth","drawImage","requestAnimationFrame","render","display","InferenceUI"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container\n    } from 'reactstrap';\n   /* Container, Col, Row,\n    Form, FormGroup, Label, Input,\n    Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\nimport React, {useRef, useEffect} from 'react';\n//import io from 'socket.io-client';\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvasPreview = React.createRef();\n\t\tthis.selectVideoSrc = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n\t\n\tgetStream(){\n\tif (window.stream) {\n    window.stream.getTracks().forEach(function(track) {\n      track.stop();\n      console.log(\"mmmmm\");\n    });\n\t}\n  const constraints = {\n    video: {\n      deviceId: {exact: selectVideoSrc.value},\n      width: {ideal: 1280},\n      height: {ideal: 720}\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).\n    then(gotStream).catch(handleError);\n\t}\n  componentDidMount() {\n    navigator.mediaDevices\n\t\t.enumerateDevices()\n\t\t.then( deviceInfos => {\n\t\t\t\tfor (let i = 0; i !== deviceInfos.length; ++i) {\n\t\t\t\t\tconst deviceInfo = deviceInfos[i];\n\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\toption.value = deviceInfo.deviceId;\n\t\t\t\t\tif (deviceInfo.kind === 'videoinput') {\n\t\t\t\t\t\toption.text = deviceInfo.label || 'camera ' +\n\t\t\t\t\t\t\t(this.selectVideoSrc.current.length + 1);\n\t\t\t\t\t\tthis.selectVideoSrc.current.appendChild(option);\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t})\t\t\t\t \n\t\t.then(this.getStream)\n/*\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n        window.stream = stream;\n      });\n*/\n  }\n\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasPreviewElement = this.canvasPreview.current;\n          const canvasPreview = canvasPreviewElement.getContext(\"2d\");\n\n          canvasPreviewElement.height = video.videoHeight;\n          canvasPreviewElement.width = video.videoWidth;\n          canvasPreview.drawImage(\n            video,\n            0,\n            0,\n            canvasPreviewElement.width,\n            canvasPreviewElement.height\n          );\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const { isVideoLoading } = this.state;\n\n    return (\n      <div>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          style={{ display: \"none\" }}\n        />\n\n        {!isVideoLoading && <canvas ref={this.canvasPreview} />}\n\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n\t\t\t\t<select ref={this.selectVideoSrc}\n\t\t\t\t\t\t\t\tstyle={{width: 300 }}\n\t\t\t\t/>\n\n      </div>\n    );\n  }\n}\nclass InferenceUI extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n    \n\n    render() {\n      return (\n\t\t\t\t\t<Container id=\"container\">\n\t\t\t\t\t\t<WebcamStream id=\"asa\"/>\n\t\t\t\t\t</Container>\n        );\n        \n    }\n}\n\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}