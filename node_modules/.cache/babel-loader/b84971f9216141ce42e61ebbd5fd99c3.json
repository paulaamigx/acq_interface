{"ast":null,"code":"var _jsxFileName = \"/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js\";\nimport './InferenceUI.css';\nimport { Container } from 'reactstrap';\n/* Container, Col, Row,\n Form, FormGroup, Label, Input,\n Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\n\nimport React, { useRef, useEffect } from 'react'; //import io from 'socket.io-client';\n\n/*\nconst Canvas = props => {\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n\t\tcanvas.width = 640;\n\t\tcanvas.height= 480;\n\t\tcontext.width= 640;\n\t\tcontext.height= 480;\n\n    context.fillStyle = '#000000'\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n\t\n\t\tvar video = document.querySelector(\"#asa\")\n\t\tconsole.log(\"aa\");\n\t\tconsole.log(video);\n\t\t\n\t\tconst render = () => {\n\t\tcontext.drawImage(video,0,0,context.width,context.height);\n\n\t\t}\n\t\trender()\n\t\treturn() => {\n\n\t\t}\n  }, [])\n\n\t\t\t\t\n\n  return <canvas ref={canvasRef} {...props}/>\n}\n*/\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideoLoading: true\n    };\n    this.videoTag = React.createRef();\n    this.canvas = React.createRef();\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: \"environment\"\n      }\n    }).then(stream => {\n      this.videoTag.current.srcObject = stream;\n      requestAnimationFrame(this.tick);\n    });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n        this.setState({\n          isVideoLoading: false\n        });\n        const canvasElement = this.canvas.current;\n        const canvas = canvasElement.getContext(\"2d\");\n        canvasElement.height = video.videoHeight;\n        canvasElement.width = video.videoWidth;\n        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const {\n      isVideoLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoTag,\n      width: \"400\",\n      height: \"400\",\n      autoPlay: true,\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), !isVideoLoading && /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvas,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }), isVideoLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 28\n      }\n    }, \"Please wait while we load the video stream.\"));\n  }\n\n}\n\nclass InferenceUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(WebcamStream, {\n      id: \"asa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default InferenceUI;","map":{"version":3,"sources":["/home/paula/Documents/Practica/git/user_interface/src/components/InferenceUI/InferenceUI.js"],"names":["Container","React","useRef","useEffect","WebcamStream","Component","constructor","props","state","isVideoLoading","videoTag","createRef","canvas","tick","bind","componentDidMount","navigator","mediaDevices","getUserMedia","video","facingMode","then","stream","current","srcObject","requestAnimationFrame","checkVideoState","setInterval","readyState","HAVE_ENOUGH_DATA","clearInterval","setState","canvasElement","getContext","height","videoHeight","width","videoWidth","drawImage","render","display","InferenceUI"],"mappings":"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","sourcesContent":["import './InferenceUI.css';\nimport {Container\n    } from 'reactstrap';\n   /* Container, Col, Row,\n    Form, FormGroup, Label, Input,\n    Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';*/\nimport React, {useRef, useEffect} from 'react';\n//import io from 'socket.io-client';\n/*\nconst Canvas = props => {\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n\t\tcanvas.width = 640;\n\t\tcanvas.height= 480;\n\t\tcontext.width= 640;\n\t\tcontext.height= 480;\n\n    context.fillStyle = '#000000'\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n\t\n\t\tvar video = document.querySelector(\"#asa\")\n\t\tconsole.log(\"aa\");\n\t\tconsole.log(video);\n\t\t\n\t\tconst render = () => {\n\t\tcontext.drawImage(video,0,0,context.width,context.height);\n\n\t\t}\n\t\trender()\n\t\treturn() => {\n\n\t\t}\n  }, [])\n\n\t\t\t\t\n\n  return <canvas ref={canvasRef} {...props}/>\n}\n*/\n\nclass WebcamStream extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVideoLoading: true\n    };\n\n    this.videoTag = React.createRef();\n    this.canvas = React.createRef();\n\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoTag.current.srcObject = stream;\n        requestAnimationFrame(this.tick);\n      });\n  }\n\n  tick() {\n    const video = this.videoTag.current;\n\n    const checkVideoState = setInterval(() => {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        clearInterval(checkVideoState);\n\n        this.setState({ isVideoLoading: false });\n\n          const canvasElement = this.canvas.current;\n          const canvas = canvasElement.getContext(\"2d\");\n\n          canvasElement.height = video.videoHeight;\n          canvasElement.width = video.videoWidth;\n          canvas.drawImage(\n            video,\n            0,\n            0,\n            canvasElement.width,\n            canvasElement.height\n          );\n        requestAnimationFrame(this.tick);\n      }\n    }, 50);\n  }\n\n  render() {\n    const { isVideoLoading } = this.state;\n\n    return (\n      <div>\n        <video\n          ref={this.videoTag}\n          width=\"400\"\n          height=\"400\"\n          autoPlay\n          style={{ display: \"none\" }}\n        />\n\n        {!isVideoLoading && <canvas ref={this.canvas} />}\n\n        {isVideoLoading && <p>Please wait while we load the video stream.</p>}\n      </div>\n    );\n  }\n}\nclass InferenceUI extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n\t\n    render() {\n        return (\n\t\t\t\t\t<Container id=\"container\">\n\t\t\t\t\t\t<WebcamStream id=\"asa\"/>\n\t\t\t\t\t</Container>\n        );\n        \n    }\n}\n\nexport default InferenceUI;\n"]},"metadata":{},"sourceType":"module"}